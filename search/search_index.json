{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Top level docs for CL \u00b6 This guide is intended for maintainers and editors of the cell ontology. For general guidance on editing OBO-(ish) ontologies, please see ODK-docs","title":"Getting started"},{"location":"#top-level-docs-for-cl","text":"This guide is intended for maintainers and editors of the cell ontology. For general guidance on editing OBO-(ish) ontologies, please see ODK-docs","title":"Top level docs for CL"},{"location":"Adding_classes_from_another_ontology/","text":"How to add (import) classes to the Cell Ontology (CL) from another ontology \u00b6 1. Follow steps 1 - 5 under the heading Protege-based declaration. \u00b6 NB: Even though the instructions state that this workflow is to be avoided, the other solutions in the current documentation are out of date. 2. Refresh the imports \u00b6 To refresh the imports, open Docker so it is running in the background. Then open Terminal, navigate to src/ontology directory in the cell-ontology repository and run: sh run.sh make imports/merged_import.owl Running the above command requires > 8GB RAM and sufficient computational power. If the refresh fails to complete due to hardware limitations, create a new issue in GitHub detailing which class(es) need to be imported and another editor can add it on your behalf. Once the imports are refreshed, return to Prot\u00e9g\u00e9, add the logical axioms that include the newly imported class(es) and create a pull request per standard procedure. Note that the import refresh process seems to be quite laborious/computationally expensive as-is, and a centralised database approach may be an improved longterm solution.","title":"How to add (import) classes to the Cell Ontology (CL) from another ontology"},{"location":"Adding_classes_from_another_ontology/#how-to-add-import-classes-to-the-cell-ontology-cl-from-another-ontology","text":"","title":"How to add (import) classes to the Cell Ontology (CL) from another ontology"},{"location":"Adding_classes_from_another_ontology/#1-follow-steps-1-5-under-the-heading-protege-based-declaration","text":"NB: Even though the instructions state that this workflow is to be avoided, the other solutions in the current documentation are out of date.","title":"1. Follow steps 1 - 5 under the heading Protege-based declaration."},{"location":"Adding_classes_from_another_ontology/#2-refresh-the-imports","text":"To refresh the imports, open Docker so it is running in the background. Then open Terminal, navigate to src/ontology directory in the cell-ontology repository and run: sh run.sh make imports/merged_import.owl Running the above command requires > 8GB RAM and sufficient computational power. If the refresh fails to complete due to hardware limitations, create a new issue in GitHub detailing which class(es) need to be imported and another editor can add it on your behalf. Once the imports are refreshed, return to Prot\u00e9g\u00e9, add the logical axioms that include the newly imported class(es) and create a pull request per standard procedure. Note that the import refresh process seems to be quite laborious/computationally expensive as-is, and a centralised database approach may be an improved longterm solution.","title":"2. Refresh the imports"},{"location":"Fixing_xsdstring_diffs/","text":"Fixing ^^xsd:string Diffs \u00b6 When you make edits, sometimes there will be large amounts of unintended differences that show up that involves the removal of ^^xsd:string. If so, you can resolve them by following normalising your cl-edit.owl file. SOP \u00b6 Update your file from Master (see 'How to resolve merge conflicts' for instructions on how to do this including how to resolve clashes while doing this). in the terminal, set directory to the ontology folder in CL: cd .../GitHub/cell-ontology/src/ontology Run the normaliser in terminal: If you have docker installed: sh run.sh make normalise_xsd_string If you do not have docker installed: make normalise_xsd_string If \"make\" is not installed, on MAC: sed -i '' \"s/Annotation[(]\\(oboInOwl[:]hasDbXref [\\\"][^\\\"]*[\\\"]\\)[)]/Annotation(\\1^^xsd:string)/g\" cl-edit.owl This should resolve your ^^xsd:string issue, after which, you can handle your pull request as per usual.","title":"Fixing unintended ^^xsd:string diffs"},{"location":"Fixing_xsdstring_diffs/#fixing-xsdstring-diffs","text":"When you make edits, sometimes there will be large amounts of unintended differences that show up that involves the removal of ^^xsd:string. If so, you can resolve them by following normalising your cl-edit.owl file.","title":"Fixing ^^xsd:string Diffs"},{"location":"Fixing_xsdstring_diffs/#sop","text":"Update your file from Master (see 'How to resolve merge conflicts' for instructions on how to do this including how to resolve clashes while doing this). in the terminal, set directory to the ontology folder in CL: cd .../GitHub/cell-ontology/src/ontology Run the normaliser in terminal: If you have docker installed: sh run.sh make normalise_xsd_string If you do not have docker installed: make normalise_xsd_string If \"make\" is not installed, on MAC: sed -i '' \"s/Annotation[(]\\(oboInOwl[:]hasDbXref [\\\"][^\\\"]*[\\\"]\\)[)]/Annotation(\\1^^xsd:string)/g\" cl-edit.owl This should resolve your ^^xsd:string issue, after which, you can handle your pull request as per usual.","title":"SOP"},{"location":"Keeping_ontology_terms_up_to_date/","text":"Keeping cell ontology annotation up to date \u00b6 Cell ontology identifiers (IRIs) are never lost, but they are occasionally deprecated. On the rare occasions that this happens, all logical links to other ontology terms (e.g. recording classification or partonomy) are removed and term is tagged with the annotation owl:deprecated True . To aid migration of annotations to the latest standard, these terms are also annotated with either a term_replaced_by or a consider tag. A term_replaced_by annotation is used to record the ID of a term it is safe to auto-migrate annotations to. More rarely, consider is used to record multiple potential replacement terms requiring human consideration to map. In these cases, a comment will be present to provide guidance for mapping. The Ontology Lookup Service API provides a convenient way to check for deprecated terms & find replacements. The term http://purl.obolibrary.org/obo/CL_0000375 has been deprecated and has that tag term_replaced_by Querying the OLS API for this: https://www.ebi.ac.uk/ols/api/ontologies/cl/terms/http%253A%252F%252Fpurl.obolibrary.org%252Fobo%252FCL_0000375. (Note the query IRI must be double encoded) Returns: { \"iri\" : \"http://purl.obolibrary.org/obo/CL_0000375\", \"label\" : \"obsolete osteoprogenitor cell\", \"description\" : null, \"annotation\" : { \"database_cross_reference\" : [ \"BTO:0002051\" ], \"has_obo_namespace\" : [ \"cell\" ], \"term replaced by\" : [ \"CL:0007010\" ] }, \"synonyms\" : null, \"ontology_name\" : \"cl\", \"ontology_prefix\" : \"CL\", \"ontology_iri\" : \"http://purl.obolibrary.org/obo/cl.owl\", \"is_obsolete\" : true, \"term_replaced_by\" : \"CL:0007010\", \"is_defining_ontology\" : true, \"has_children\" : false, \"is_root\" : true, \"short_form\" : \"CL_0000375\", \"obo_id\" : \"CL:0000375\", \"in_subset\" : null, \"obo_definition_citation\" : null, \"obo_xref\" : [{\"database\":\"BTO\",\"id\":\"0002051\",\"description\":null,\"url\":\"http://purl.obolibrary.org/obo/BTO_0002051\"}], \"obo_synonym\" : null, \"is_preferred_root\" : false, \"_links\" : { \"self\" : { \"href\" : \"https://www.ebi.ac.uk/ols/api/ontologies/cl/terms/http%253A%252F%252Fpurl.obolibrary.org%252Fobo%252FCL_0000375\" }, \"graph\" : { \"href\" : \"https://www.ebi.ac.uk/ols/api/ontologies/cl/terms/http%253A%252F%252Fpurl.obolibrary.org%252Fobo%252FCL_0000375/graph\" } } } The term_replaced_by key points to the ID of a safe replacement term: CL:0007010. This is a CURIE for http://purl.obolibrary.org/obo/CL_0007010 * consider The term http://purl.obolibrary.org/obo/CL_0000144 has been deprecated and has a consider tag pointing to multiple possible replacement terms, along with a comment for guidance. Querying the OLS API for this: https://www.ebi.ac.uk/ols/api/ontologies/cl/terms/http%253A%252F%252Fpurl.obolibrary.org%252Fobo%252FCL_0000144 Returns { \"iri\" : \"http://purl.obolibrary.org/obo/CL_0000144\", \"label\" : \"obsolete cell by function\", \"description\" : [ \"OBSOLETE: A classification of cells by their primary end goal or behavior.\" ], \"annotation\" : { \"comment\" : [ \"This term was made obsolete because there is no difference in meaning between it and 'cell', as any cell can be classified by its function or behavior. If you have used this term in annotation, please replace it with cell (CL:0000000), native cell (CL:0000003), or cell in vitro (CL:0001034) as appropriate.\" ], \"consider\" : [ \"CL:0001034\", \"CL:0000000\", \"CL:0000003\" ], \"has_obo_namespace\" : [ \"cell\" ] }, \"synonyms\" : null, \"ontology_name\" : \"cl\", \"ontology_prefix\" : \"CL\", \"ontology_iri\" : \"http://purl.obolibrary.org/obo/cl.owl\", \"is_obsolete\" : true, \"term_replaced_by\" : null, \"is_defining_ontology\" : true, \"has_children\" : false, \"is_root\" : true, \"short_form\" : \"CL_0000144\", \"obo_id\" : \"CL:0000144\", \"in_subset\" : null, \"obo_definition_citation\" : [{\"definition\":\"OBSOLETE: A classification of cells by their primary end goal or behavior.\",\"oboXrefs\":[{\"database\":\"FB\",\"id\":\"ma\",\"description\":null,\"url\":\"http://flybase.org/reports/ma.html\"}]}], \"obo_xref\" : null, \"obo_synonym\" : null, \"is_preferred_root\" : false, \"_links\" : { \"self\" : { \"href\" : \"https://www.ebi.ac.uk/ols/api/ontologies/cl/terms/http%253A%252F%252Fpurl.obolibrary.org%252Fobo%252FCL_0000144\" }, \"graph\" : { \"href\" : \"https://www.ebi.ac.uk/ols/api/ontologies/cl/terms/http%253A%252F%252Fpurl.obolibrary.org%252Fobo%252FCL_0000144/graph\" } } } * Warning - due to legacy issues, the values of these tags are either a curie (CL:0000123) or short_form ID (CL_0000123) rather than an iri. Handling code needs to deal with both of these formats.","title":"Keep terms up-to-date"},{"location":"Keeping_ontology_terms_up_to_date/#keeping-cell-ontology-annotation-up-to-date","text":"Cell ontology identifiers (IRIs) are never lost, but they are occasionally deprecated. On the rare occasions that this happens, all logical links to other ontology terms (e.g. recording classification or partonomy) are removed and term is tagged with the annotation owl:deprecated True . To aid migration of annotations to the latest standard, these terms are also annotated with either a term_replaced_by or a consider tag. A term_replaced_by annotation is used to record the ID of a term it is safe to auto-migrate annotations to. More rarely, consider is used to record multiple potential replacement terms requiring human consideration to map. In these cases, a comment will be present to provide guidance for mapping. The Ontology Lookup Service API provides a convenient way to check for deprecated terms & find replacements. The term http://purl.obolibrary.org/obo/CL_0000375 has been deprecated and has that tag term_replaced_by Querying the OLS API for this: https://www.ebi.ac.uk/ols/api/ontologies/cl/terms/http%253A%252F%252Fpurl.obolibrary.org%252Fobo%252FCL_0000375. (Note the query IRI must be double encoded) Returns: { \"iri\" : \"http://purl.obolibrary.org/obo/CL_0000375\", \"label\" : \"obsolete osteoprogenitor cell\", \"description\" : null, \"annotation\" : { \"database_cross_reference\" : [ \"BTO:0002051\" ], \"has_obo_namespace\" : [ \"cell\" ], \"term replaced by\" : [ \"CL:0007010\" ] }, \"synonyms\" : null, \"ontology_name\" : \"cl\", \"ontology_prefix\" : \"CL\", \"ontology_iri\" : \"http://purl.obolibrary.org/obo/cl.owl\", \"is_obsolete\" : true, \"term_replaced_by\" : \"CL:0007010\", \"is_defining_ontology\" : true, \"has_children\" : false, \"is_root\" : true, \"short_form\" : \"CL_0000375\", \"obo_id\" : \"CL:0000375\", \"in_subset\" : null, \"obo_definition_citation\" : null, \"obo_xref\" : [{\"database\":\"BTO\",\"id\":\"0002051\",\"description\":null,\"url\":\"http://purl.obolibrary.org/obo/BTO_0002051\"}], \"obo_synonym\" : null, \"is_preferred_root\" : false, \"_links\" : { \"self\" : { \"href\" : \"https://www.ebi.ac.uk/ols/api/ontologies/cl/terms/http%253A%252F%252Fpurl.obolibrary.org%252Fobo%252FCL_0000375\" }, \"graph\" : { \"href\" : \"https://www.ebi.ac.uk/ols/api/ontologies/cl/terms/http%253A%252F%252Fpurl.obolibrary.org%252Fobo%252FCL_0000375/graph\" } } } The term_replaced_by key points to the ID of a safe replacement term: CL:0007010. This is a CURIE for http://purl.obolibrary.org/obo/CL_0007010 * consider The term http://purl.obolibrary.org/obo/CL_0000144 has been deprecated and has a consider tag pointing to multiple possible replacement terms, along with a comment for guidance. Querying the OLS API for this: https://www.ebi.ac.uk/ols/api/ontologies/cl/terms/http%253A%252F%252Fpurl.obolibrary.org%252Fobo%252FCL_0000144 Returns { \"iri\" : \"http://purl.obolibrary.org/obo/CL_0000144\", \"label\" : \"obsolete cell by function\", \"description\" : [ \"OBSOLETE: A classification of cells by their primary end goal or behavior.\" ], \"annotation\" : { \"comment\" : [ \"This term was made obsolete because there is no difference in meaning between it and 'cell', as any cell can be classified by its function or behavior. If you have used this term in annotation, please replace it with cell (CL:0000000), native cell (CL:0000003), or cell in vitro (CL:0001034) as appropriate.\" ], \"consider\" : [ \"CL:0001034\", \"CL:0000000\", \"CL:0000003\" ], \"has_obo_namespace\" : [ \"cell\" ] }, \"synonyms\" : null, \"ontology_name\" : \"cl\", \"ontology_prefix\" : \"CL\", \"ontology_iri\" : \"http://purl.obolibrary.org/obo/cl.owl\", \"is_obsolete\" : true, \"term_replaced_by\" : null, \"is_defining_ontology\" : true, \"has_children\" : false, \"is_root\" : true, \"short_form\" : \"CL_0000144\", \"obo_id\" : \"CL:0000144\", \"in_subset\" : null, \"obo_definition_citation\" : [{\"definition\":\"OBSOLETE: A classification of cells by their primary end goal or behavior.\",\"oboXrefs\":[{\"database\":\"FB\",\"id\":\"ma\",\"description\":null,\"url\":\"http://flybase.org/reports/ma.html\"}]}], \"obo_xref\" : null, \"obo_synonym\" : null, \"is_preferred_root\" : false, \"_links\" : { \"self\" : { \"href\" : \"https://www.ebi.ac.uk/ols/api/ontologies/cl/terms/http%253A%252F%252Fpurl.obolibrary.org%252Fobo%252FCL_0000144\" }, \"graph\" : { \"href\" : \"https://www.ebi.ac.uk/ols/api/ontologies/cl/terms/http%253A%252F%252Fpurl.obolibrary.org%252Fobo%252FCL_0000144/graph\" } } } * Warning - due to legacy issues, the values of these tags are either a curie (CL:0000123) or short_form ID (CL_0000123) rather than an iri. Handling code needs to deal with both of these formats.","title":"Keeping cell ontology annotation up to date"},{"location":"annotation_properties/","text":"Annotation Properties \u00b6 Note- this page is currently under development. The Cell Ontology has the following annotation properties: Annotation property Description Example term Example annotation Must have? Only one use per term is allowed? consider To be used on obsoleted classes, to point to a term that should be considered by curators for use in place of the obsoleted term. Multiple consider terms are allowed. It can be useful to combine this with a comment to indicate when replacement would be appropriate. CL:0000610 obsolete plant cell PO:0009002 No No created_by Added automatically on term creation with standard Protege settings. Ideally, this should use the \"supplied user name\" in the Protege User Details preference pane. This has been inconsistently applied in the past. CL:0002518 tmeehan Should Yes creation_date Added automatically on term creation with standard Protege settings. CL:0002518 2011-02-08T10:46:34Z Should Yes database_cross_reference Citable references that have helped generate the term and term's definition. Includes PubMed IDs (in the format PMID:XXXXXXXX). CL:0011005 GABAergic interneuron PMID:29724907 Should No dc:contributor Use this to annotate a whole ontology file with the identifier of a contributor. ORCID preferred. N/A https://orcid.org/0000-0001-9990-8331 Nice to have, if applicable No dc:creator Coming Soon CL:0001201 B cell, CD19-positive https://orcid.org/0000-0001-9990-8331 No Yes dc:date Coming soon CL:0001065 innate lymphoid cell 2017-01-30T20:20:48Z No Yes dc:description Use this to annotate a whole ontology file with a brief description of the ontology. N/A An ontology of cell types. No No dc:title Use this to annotate an ontology, giving it a human readable title. N/A Cell Ontology No No dcterms:license Use to attach a license to the whole ontology file. N/A http://creativecommons.org/licenses/by/4.0/ No No definition The textual definition for the ontology class. CL:0000946 antibody secreting cell A lymphocyte of B lineage that is devoted to secreting large amounts of immunoglobulin. Must Yes 'expand expression to' Coming soon Coming soon Coming soon No No foaf:depicted_by Use this to add a link to an image that depicts an example of an entity referred to by the term Coming soon Coming soon No No has_alternative_id In CL this is a legacy property. Do not use. CL:0000059 ameloblast CL:0000053 No No has_broad_synonym Used for synonyms where the primary definition accurately describes the synonym, but the definition of the synonym may encompass other structures as well. In some cases where a broad synonym is given, it will be a broad synonym for more than one ontology term. You are encouraged to add a reference that uses the term in this way. CL:0000365 animal zygote zygote No No has_exact_synonym Used for synonyms where the definition of the synonym is exactly the same as primary term definition. This is used when the same class can have more than one name. You are encouraged to add a reference that uses the term in this way. CL:0000622 acinar cell acinic cell Nice to have, if applicable No has_narrow_synonym Used for synonyms where the definition of the synonym is the same as the primary definition, but has additional qualifiers. You are encouraged to add a reference that uses the term in this way. CL:0000362 epidermal cell epithelial cell of skin No No has_obo_namespace This is a legacy annotation property. Do not add this manually. CL:0001061 abnormal cell cell No No has_related_synonym This scope is applied when a word of phrase has been used synonymously with the primary term name in the literature, but the usage is not strictly correct. That is, the synonym in fact has a slightly different meaning than the primary term name. Since users may not be aware that the synonym was being used incorrectly when searching for a term, related synonyms are included. CL:0000902 induced T-regulatory cell adaptive Treg No No has_synonym_type The target of this relation must be an annotation property of type 'synonym_type_property'. N/A N/A No No IAO_0000116 Coming soon Coming soon Coming soon No No id Automatically added by some pathways. Do not add manually. If duplicating a term (with the duplicate getting a new ID), it should be deleted. CL:2000074 splenocyte CL:2000074 Yes Yes in_subset Used to add subset tags, used in conjunction with subset_property CL:0000039 germ line cell _upper_level No No is_inferred This annotation property is used in some automated pipelines. Do not add manually Coming soon Coming soon No No rdfs:comment Use to add a clarifying comment to a term. This can be useful for adding examples and for clarifying terminological confusions. CL:0007016 adaxial cell In teleosts, adaxial cells give rise to slow muscle myoblasts. No Yes rdfs:isDefinedBy Do not add manually. Coming soon Coming soon No Yes rdfs:label Primary name - used as a display name by Protege (with standard settings) and most downstream consumers. Add only one of these. It must be unique within an ontology. CL:0000418 arcade cell arcade cell Must Yes RO_0002161 Coming soon Coming soon No No 'see also' Used to link to a webpage, such as a GitHub ticket. CL:0000134 mesenchymal stem cell https://github.com/obophenotype/cell-ontology/issues/474 No No shorthand Added automatically by some pipelines. Do not add manually Coming soon Coming soon No No subset_property A grouping class for subset tags. N/A N/A No No subset_property: added_for_HCA A subset tag for terms that were requested by the Human Cell Atlas. N/A N/A No No subset property: location_grouping A subset tag for cell types from a particular anatomical location. N/A N/A No No synonym_type_property A grouping class for synonym tags. N/A N/A No No 'term replaced by' To be used on obsolete terms to indicate a term that can be automatically substituted for the obsoleted term. Coming soon Coming soon No No","title":"CL Annotation Properties"},{"location":"annotation_properties/#annotation-properties","text":"Note- this page is currently under development. The Cell Ontology has the following annotation properties: Annotation property Description Example term Example annotation Must have? Only one use per term is allowed? consider To be used on obsoleted classes, to point to a term that should be considered by curators for use in place of the obsoleted term. Multiple consider terms are allowed. It can be useful to combine this with a comment to indicate when replacement would be appropriate. CL:0000610 obsolete plant cell PO:0009002 No No created_by Added automatically on term creation with standard Protege settings. Ideally, this should use the \"supplied user name\" in the Protege User Details preference pane. This has been inconsistently applied in the past. CL:0002518 tmeehan Should Yes creation_date Added automatically on term creation with standard Protege settings. CL:0002518 2011-02-08T10:46:34Z Should Yes database_cross_reference Citable references that have helped generate the term and term's definition. Includes PubMed IDs (in the format PMID:XXXXXXXX). CL:0011005 GABAergic interneuron PMID:29724907 Should No dc:contributor Use this to annotate a whole ontology file with the identifier of a contributor. ORCID preferred. N/A https://orcid.org/0000-0001-9990-8331 Nice to have, if applicable No dc:creator Coming Soon CL:0001201 B cell, CD19-positive https://orcid.org/0000-0001-9990-8331 No Yes dc:date Coming soon CL:0001065 innate lymphoid cell 2017-01-30T20:20:48Z No Yes dc:description Use this to annotate a whole ontology file with a brief description of the ontology. N/A An ontology of cell types. No No dc:title Use this to annotate an ontology, giving it a human readable title. N/A Cell Ontology No No dcterms:license Use to attach a license to the whole ontology file. N/A http://creativecommons.org/licenses/by/4.0/ No No definition The textual definition for the ontology class. CL:0000946 antibody secreting cell A lymphocyte of B lineage that is devoted to secreting large amounts of immunoglobulin. Must Yes 'expand expression to' Coming soon Coming soon Coming soon No No foaf:depicted_by Use this to add a link to an image that depicts an example of an entity referred to by the term Coming soon Coming soon No No has_alternative_id In CL this is a legacy property. Do not use. CL:0000059 ameloblast CL:0000053 No No has_broad_synonym Used for synonyms where the primary definition accurately describes the synonym, but the definition of the synonym may encompass other structures as well. In some cases where a broad synonym is given, it will be a broad synonym for more than one ontology term. You are encouraged to add a reference that uses the term in this way. CL:0000365 animal zygote zygote No No has_exact_synonym Used for synonyms where the definition of the synonym is exactly the same as primary term definition. This is used when the same class can have more than one name. You are encouraged to add a reference that uses the term in this way. CL:0000622 acinar cell acinic cell Nice to have, if applicable No has_narrow_synonym Used for synonyms where the definition of the synonym is the same as the primary definition, but has additional qualifiers. You are encouraged to add a reference that uses the term in this way. CL:0000362 epidermal cell epithelial cell of skin No No has_obo_namespace This is a legacy annotation property. Do not add this manually. CL:0001061 abnormal cell cell No No has_related_synonym This scope is applied when a word of phrase has been used synonymously with the primary term name in the literature, but the usage is not strictly correct. That is, the synonym in fact has a slightly different meaning than the primary term name. Since users may not be aware that the synonym was being used incorrectly when searching for a term, related synonyms are included. CL:0000902 induced T-regulatory cell adaptive Treg No No has_synonym_type The target of this relation must be an annotation property of type 'synonym_type_property'. N/A N/A No No IAO_0000116 Coming soon Coming soon Coming soon No No id Automatically added by some pathways. Do not add manually. If duplicating a term (with the duplicate getting a new ID), it should be deleted. CL:2000074 splenocyte CL:2000074 Yes Yes in_subset Used to add subset tags, used in conjunction with subset_property CL:0000039 germ line cell _upper_level No No is_inferred This annotation property is used in some automated pipelines. Do not add manually Coming soon Coming soon No No rdfs:comment Use to add a clarifying comment to a term. This can be useful for adding examples and for clarifying terminological confusions. CL:0007016 adaxial cell In teleosts, adaxial cells give rise to slow muscle myoblasts. No Yes rdfs:isDefinedBy Do not add manually. Coming soon Coming soon No Yes rdfs:label Primary name - used as a display name by Protege (with standard settings) and most downstream consumers. Add only one of these. It must be unique within an ontology. CL:0000418 arcade cell arcade cell Must Yes RO_0002161 Coming soon Coming soon No No 'see also' Used to link to a webpage, such as a GitHub ticket. CL:0000134 mesenchymal stem cell https://github.com/obophenotype/cell-ontology/issues/474 No No shorthand Added automatically by some pipelines. Do not add manually Coming soon Coming soon No No subset_property A grouping class for subset tags. N/A N/A No No subset_property: added_for_HCA A subset tag for terms that were requested by the Human Cell Atlas. N/A N/A No No subset property: location_grouping A subset tag for cell types from a particular anatomical location. N/A N/A No No synonym_type_property A grouping class for synonym tags. N/A N/A No No 'term replaced by' To be used on obsolete terms to indicate a term that can be automatically substituted for the obsoleted term. Coming soon Coming soon No No","title":"Annotation Properties"},{"location":"cite/","text":"How to cite CL \u00b6","title":"Cite"},{"location":"cite/#how-to-cite-cl","text":"","title":"How to cite CL"},{"location":"contact_us/","text":"Contact Us \u00b6 GitHub \u00b6 The preferred point of contact for the Cell Ontology is the GitHub Issue Tracker . It is used commonly for requesting new terms or suggesting changes to existing terms. Feel free to open a new issue with any kind of request/question/consideration you might have. If you do not have a GitHub account, you can sign up for a free account here . E-mail and other contacts \u00b6 The Cell Ontology also has a Slack Channel and monthly meetings, with an open agenda . If you want to join the channel or talk about any other topics related to the Cell Ontology, you may reach out to one of the active CL editors. The official contact for CL listed at the OBO Foundry is Alexander Diehl , but feel free to contact any other individual. A list of active CL editors can be found here . Note that requests on the GitHub issue tracker may be addressed more quickly, as individuals are often busy. For other details on CL, you may see http://obofoundry.org/ontology/cl.html .","title":"Contact"},{"location":"contact_us/#contact-us","text":"","title":"Contact Us"},{"location":"contact_us/#github","text":"The preferred point of contact for the Cell Ontology is the GitHub Issue Tracker . It is used commonly for requesting new terms or suggesting changes to existing terms. Feel free to open a new issue with any kind of request/question/consideration you might have. If you do not have a GitHub account, you can sign up for a free account here .","title":"GitHub"},{"location":"contact_us/#e-mail-and-other-contacts","text":"The Cell Ontology also has a Slack Channel and monthly meetings, with an open agenda . If you want to join the channel or talk about any other topics related to the Cell Ontology, you may reach out to one of the active CL editors. The official contact for CL listed at the OBO Foundry is Alexander Diehl , but feel free to contact any other individual. A list of active CL editors can be found here . Note that requests on the GitHub issue tracker may be addressed more quickly, as individuals are often busy. For other details on CL, you may see http://obofoundry.org/ontology/cl.html .","title":"E-mail and other contacts"},{"location":"contributing/","text":"How to contribute to CL \u00b6 We welcome your contributions to CL! Generally, you can follow the editors workflow instructions here . However, if you aren't confident in directly editing the ontology, you can contribute by writing up an issue and one of our curators/developers will pick it up and address it. Writing up an issue \u00b6 If you want a new term added, or want edits to a current term, or spot any mistakes/issues with CL, or you have any other CL related issues, you can write up a ticket using the following steps: Go to the issues tab in CL. Click the 'New issue' tab on the top right corner and select the most appropriate category for your issue. (Note: blank issues can be created if none of the categories fit, but we recommend using the categories as they are designed to be more comprehensive). Fill up the form as best you can, giving a descriptive title to your issue name and leaving the bracketed [] tag in the title: eg. Add new term is bad name, while [NTR] larval stage X is good name. When writing up more complex issues that include multiple items or steps, make sure you include the use of - [ ] to denote action items. These turn into checkboxes which makes it much faster to assess which comments have been addressed. (Note: it is better to write up multiple issues than one big one with multiple items, e.g. write up one issue for each term you want added rather than an issue with all the terms you want added.) If you know a specific curator/editor that you want handling your ticket, you can assign them to your ticket in the assignee tab on the right, if not, someone from our team will assign an appropriate person to handle your ticket. If, however, your ticket has not been looked at in more than 10 days, and you suspect that it might have been missed, please assign it to gouttegd and they will assign it appropriately. If you know how to edit the ontology directly, please then proceed to making a Pull request with the guidelines below, following the editors workflow instructions here . Pull request guidelines \u00b6 Give your pull requests good names: Add new terms is bad. Adding larval stage X term #332 is ok. Make sure pull requests have someone assigned to review them and remind them once in a while. Do not let them go dormant Assign yourself to be the Assignee Make sure to use - [ ] to denote action items in issues and pull requests, not just comments. These turn into checkboxes which makes it much faster to assess which comments have been addressed and can be ignored. Give a short summary of the pull request - that way we can find suitable reviewers much quicker. Say which terms you are adding or what kinds of changes you are proposing. It is most of the time a good idea to use squash merge rather than merge for your pull request, to keep the git history short and useful.","title":"Contributing"},{"location":"contributing/#how-to-contribute-to-cl","text":"We welcome your contributions to CL! Generally, you can follow the editors workflow instructions here . However, if you aren't confident in directly editing the ontology, you can contribute by writing up an issue and one of our curators/developers will pick it up and address it.","title":"How to contribute to CL"},{"location":"contributing/#writing-up-an-issue","text":"If you want a new term added, or want edits to a current term, or spot any mistakes/issues with CL, or you have any other CL related issues, you can write up a ticket using the following steps: Go to the issues tab in CL. Click the 'New issue' tab on the top right corner and select the most appropriate category for your issue. (Note: blank issues can be created if none of the categories fit, but we recommend using the categories as they are designed to be more comprehensive). Fill up the form as best you can, giving a descriptive title to your issue name and leaving the bracketed [] tag in the title: eg. Add new term is bad name, while [NTR] larval stage X is good name. When writing up more complex issues that include multiple items or steps, make sure you include the use of - [ ] to denote action items. These turn into checkboxes which makes it much faster to assess which comments have been addressed. (Note: it is better to write up multiple issues than one big one with multiple items, e.g. write up one issue for each term you want added rather than an issue with all the terms you want added.) If you know a specific curator/editor that you want handling your ticket, you can assign them to your ticket in the assignee tab on the right, if not, someone from our team will assign an appropriate person to handle your ticket. If, however, your ticket has not been looked at in more than 10 days, and you suspect that it might have been missed, please assign it to gouttegd and they will assign it appropriately. If you know how to edit the ontology directly, please then proceed to making a Pull request with the guidelines below, following the editors workflow instructions here .","title":"Writing up an issue"},{"location":"contributing/#pull-request-guidelines","text":"Give your pull requests good names: Add new terms is bad. Adding larval stage X term #332 is ok. Make sure pull requests have someone assigned to review them and remind them once in a while. Do not let them go dormant Assign yourself to be the Assignee Make sure to use - [ ] to denote action items in issues and pull requests, not just comments. These turn into checkboxes which makes it much faster to assess which comments have been addressed and can be ignored. Give a short summary of the pull request - that way we can find suitable reviewers much quicker. Say which terms you are adding or what kinds of changes you are proposing. It is most of the time a good idea to use squash merge rather than merge for your pull request, to keep the git history short and useful.","title":"Pull request guidelines"},{"location":"history/","text":"A brief history of CL \u00b6 The following page gives an overview of the history of CL.","title":"History"},{"location":"history/#a-brief-history-of-cl","text":"The following page gives an overview of the history of CL.","title":"A brief history of CL"},{"location":"merging-terms/","text":"Merging Terms in CL \u00b6 How to merge terms \u00b6 For general instructions on how to merge terms, please see this How-to Guide In addition to the above, please add the annotation has_alternative_id on the winning term with the ID of the losing term. Considerations on which should be the winning term \u00b6 Check Usage by GO - This can be done by using AmiGO 2 Check Usage by other ontologies - This can be done by using Ontobee Check Usage within CL (you can do this in Protege with the usage tab) - this should be lower priority as you can easily change this while obsoleting the \"losing\" term","title":"Merging Terms in CL"},{"location":"merging-terms/#merging-terms-in-cl","text":"","title":"Merging Terms in CL"},{"location":"merging-terms/#how-to-merge-terms","text":"For general instructions on how to merge terms, please see this How-to Guide In addition to the above, please add the annotation has_alternative_id on the winning term with the ID of the losing term.","title":"How to merge terms"},{"location":"merging-terms/#considerations-on-which-should-be-the-winning-term","text":"Check Usage by GO - This can be done by using AmiGO 2 Check Usage by other ontologies - This can be done by using Ontobee Check Usage within CL (you can do this in Protege with the usage tab) - this should be lower priority as you can easily change this while obsoleting the \"losing\" term","title":"Considerations on which should be the winning term"},{"location":"presentations/","text":"Presentations \u00b6 Cell Ontology (Genentech presentation) by Nicole Vasilevsky. Presented on 2021-02-09.","title":"CL Presentations"},{"location":"presentations/#presentations","text":"Cell Ontology (Genentech presentation) by Nicole Vasilevsky. Presented on 2021-02-09.","title":"Presentations"},{"location":"relations_guide/","text":"A guide to what relations to use where in the Cell Ontology \u00b6 Recording location \u00b6 We record anatomical location by linking to terms from Uberon. For most purposes we record the anatomical location of cells using 'part of' . e.g. epithelial cell SubClassOf 'part of' some epithelium means that All epithelial cells are part of an epithelium. We wouldn't say 'epithelial cell' part_of some 'kidney tubule epithelium', because not all of them are. All parts of an epithelial cell are part of an epithelium. Epithelial cells are part_of some epithelium at all times. This last stricture can be hard to apply in the context of development. Some judgment may be required, e.g. - (TBA) Some cells, most obviously neurons, only have some parts in the anatomical structure we want to relate them to. For example, anteriior horn motor neurons have a soma in the anterior (ventral) horn of the spine, but also project out of the spine to innervate muscles. We have a general relation for this, 'overlap' (has some part in), but often we want to say something more specific. For example, neuron types are often referred to in part by the location of their soma. We have a dedicated relation for this: 'has soma location' , allowing us to record: 'anterior horn motor neuron' SubClassOf 'has soma location' some 'ventral horn of spinal cord' We also have a dedicated set of relations for recording the location of synaptic terminals and projections of neurons. See Relations for neurons for details. Taxon constraints \u00b6 Please see https://ontology-development-kit.readthedocs.io/en/latest/TaxonRestriction.html Recording function \u00b6 We record cellular function by linking to GO biological process terms using the relation (objectProperty) 'capable of' e.g. 'hilus cell of ovary' 'capable of' some 'androgen secretion' Recording developmental lineage \u00b6 We record developmental lineage relationships between cell types using develops from , or where we are sure there are not intermediates between the related cells, by using 'develops directly from' For example: 'leukocyte' develops from some 'hematopoietic stem cell' Relations for neurons \u00b6 Synaptic connectivity \u00b6 To record neuron to neuron or motor neuron -> target cell connectivity use. Use these relations sparingly where connectivity is key to definition, e.g. motor neuron types defined by the type of muscle cell they synapse to. synapsed to - preferred direction to record, as it fits with synapsed_by - Useful in cases where all X synapsed by some Y but there reverse is not true To record connection between a neuron and a region it innervates we have a number of relations, all sub properties of overlaps Historically we have used has(pre/post)synaptic terminal in to record this. However, these relations are defined as being true when a single synapse is present in a region. As these relations are also used with data, this turns out to be too sensitive to biological and experimental noise. We therefore now prefer the more specific relations for defining classes - defined in terms of functionally significant synaptic inputs/output in a region. Recording cell markers \u00b6 Only markers that are necessary to define a cell type should be recorded. NOTE: The details of how and when we record cell markers are are in flux. If in doubt, ask an editor. The most commonly used relation for recording markers is 'has plasma membrane part' . This is used for recording cell surface markers, especially in immune cells. We also have subproperties has low plasma membrane amount and has low plasma membrane amount' , used to the same end. In each case, a term from the protein ontology or a protein complex term from GO is used as the object of the relation: e.g. alpha-beta T cell EquiavlentTo 'T cell' and 'has plasma membrane part' some 'alpha-beta T cell receptor complex' Absence of a marker can be recorded using lacks_plasma_membrane_part . Recording qualities of cells: \u00b6 Use has characteristic Recording cell shape or other morphological qualities \u00b6 e.g. erythrocyte subClassOf has characteristic some biconcave Recording cellular qualities (eg. ploidy, nuclear number) \u00b6 nuclear number \u00b6 Use subproperty of PATO: nuclate auality e.g. 'enucleate erythrocyte' EquivalentTo erythrocyte and 'has characteristic' some anucleate Note that 'anucleate cell' and 'multinucleate cell' are disjoint.","title":"CL Relations"},{"location":"relations_guide/#a-guide-to-what-relations-to-use-where-in-the-cell-ontology","text":"","title":"A guide to what relations to use where in the Cell Ontology"},{"location":"relations_guide/#recording-location","text":"We record anatomical location by linking to terms from Uberon. For most purposes we record the anatomical location of cells using 'part of' . e.g. epithelial cell SubClassOf 'part of' some epithelium means that All epithelial cells are part of an epithelium. We wouldn't say 'epithelial cell' part_of some 'kidney tubule epithelium', because not all of them are. All parts of an epithelial cell are part of an epithelium. Epithelial cells are part_of some epithelium at all times. This last stricture can be hard to apply in the context of development. Some judgment may be required, e.g. - (TBA) Some cells, most obviously neurons, only have some parts in the anatomical structure we want to relate them to. For example, anteriior horn motor neurons have a soma in the anterior (ventral) horn of the spine, but also project out of the spine to innervate muscles. We have a general relation for this, 'overlap' (has some part in), but often we want to say something more specific. For example, neuron types are often referred to in part by the location of their soma. We have a dedicated relation for this: 'has soma location' , allowing us to record: 'anterior horn motor neuron' SubClassOf 'has soma location' some 'ventral horn of spinal cord' We also have a dedicated set of relations for recording the location of synaptic terminals and projections of neurons. See Relations for neurons for details.","title":"Recording location"},{"location":"relations_guide/#taxon-constraints","text":"Please see https://ontology-development-kit.readthedocs.io/en/latest/TaxonRestriction.html","title":"Taxon constraints"},{"location":"relations_guide/#recording-function","text":"We record cellular function by linking to GO biological process terms using the relation (objectProperty) 'capable of' e.g. 'hilus cell of ovary' 'capable of' some 'androgen secretion'","title":"Recording function"},{"location":"relations_guide/#recording-developmental-lineage","text":"We record developmental lineage relationships between cell types using develops from , or where we are sure there are not intermediates between the related cells, by using 'develops directly from' For example: 'leukocyte' develops from some 'hematopoietic stem cell'","title":"Recording developmental lineage"},{"location":"relations_guide/#relations-for-neurons","text":"","title":"Relations for neurons"},{"location":"relations_guide/#synaptic-connectivity","text":"To record neuron to neuron or motor neuron -> target cell connectivity use. Use these relations sparingly where connectivity is key to definition, e.g. motor neuron types defined by the type of muscle cell they synapse to. synapsed to - preferred direction to record, as it fits with synapsed_by - Useful in cases where all X synapsed by some Y but there reverse is not true To record connection between a neuron and a region it innervates we have a number of relations, all sub properties of overlaps Historically we have used has(pre/post)synaptic terminal in to record this. However, these relations are defined as being true when a single synapse is present in a region. As these relations are also used with data, this turns out to be too sensitive to biological and experimental noise. We therefore now prefer the more specific relations for defining classes - defined in terms of functionally significant synaptic inputs/output in a region.","title":"Synaptic connectivity"},{"location":"relations_guide/#recording-cell-markers","text":"Only markers that are necessary to define a cell type should be recorded. NOTE: The details of how and when we record cell markers are are in flux. If in doubt, ask an editor. The most commonly used relation for recording markers is 'has plasma membrane part' . This is used for recording cell surface markers, especially in immune cells. We also have subproperties has low plasma membrane amount and has low plasma membrane amount' , used to the same end. In each case, a term from the protein ontology or a protein complex term from GO is used as the object of the relation: e.g. alpha-beta T cell EquiavlentTo 'T cell' and 'has plasma membrane part' some 'alpha-beta T cell receptor complex' Absence of a marker can be recorded using lacks_plasma_membrane_part .","title":"Recording cell markers"},{"location":"relations_guide/#recording-qualities-of-cells","text":"Use has characteristic","title":"Recording qualities of cells:"},{"location":"relations_guide/#recording-cell-shape-or-other-morphological-qualities","text":"e.g. erythrocyte subClassOf has characteristic some biconcave","title":"Recording cell shape or other morphological qualities"},{"location":"relations_guide/#recording-cellular-qualities-eg-ploidy-nuclear-number","text":"","title":"Recording cellular qualities (eg. ploidy, nuclear number)"},{"location":"relations_guide/#nuclear-number","text":"Use subproperty of PATO: nuclate auality e.g. 'enucleate erythrocyte' EquivalentTo erythrocyte and 'has characteristic' some anucleate Note that 'anucleate cell' and 'multinucleate cell' are disjoint.","title":"nuclear number"},{"location":"resolving_merge_conflicts/","text":"A guide to resolving merge conflicts \u00b6 When you come to merge your pull request, you may find that conflicts prevent automated merging back into the master. In some cases, GitHub supports resolution of these through its web interface. However, probably due to file size, this is not currently supported for cl-edit.owl. The majority of the time, the conflict is trivial - due to addition of new terms to the same point in the file. Because terms are ordered in the file by ID, this happens whenever two edits add terms without any intervening IDs. Trivial clashes are easy to spot - they involve whole term stanzas + declarations. Occassionally non-trivial clashes will happen when two pull requests include edits to the same term or even the same axiom. Ask an editor for help if you don't feel confident resolving these. SOP. \u00b6 Reserialise the Master file using the Ontology Development Kit (ODK). This requires setting up Docker and ODK. If not already set up, follow the instructions here . Open Docker. At the line command (PC) or Terminal (Mac), use the cd (change directory) command to navigate to the repository's src/ontology/ directory. For example, ''' cd PATH_TO_ONTOLOGY/src/ontology/ ''' Replace \"PATH_TO_ONTOLOGY\" with the actual file path to the ontology. If you need to orient yourself, use the '''pwd''' (present working directory) or '''ls''' (list) line commands. If you are resolving a conflict in an .owl file, run: ''' sh run.sh make normalize_src ''' If you are resolving a conflict in an .obo file, run: ''' sh run.sh make normalize_obo_src ''' In CL, edits sometimes result in creating a large amount of uninteded differences involving ^^xsd:string. If you see these differences after running the command above, they can be resolved by following the instructions here . In GitHub Desktop: Checkout Master and pull to make sure your Master branch is up to date. Checkout the branch for the pull request and make sure it is up to date. Choose Branch > Update from master: GitHub desktop should detect the clash and ask you if you want to open in your text editor of choice (e.g., Atom). If clashes are due to trivial ordering problems, delete the conflict marks (<<<<<<<, =======, >>>>>>>), commit and push back to GitHub. Check the resulting diffs on the Pull Request on GitHub. Once the checks have run and are successful, merge and delete the branch.","title":"How to resolve merge conflicts"},{"location":"resolving_merge_conflicts/#a-guide-to-resolving-merge-conflicts","text":"When you come to merge your pull request, you may find that conflicts prevent automated merging back into the master. In some cases, GitHub supports resolution of these through its web interface. However, probably due to file size, this is not currently supported for cl-edit.owl. The majority of the time, the conflict is trivial - due to addition of new terms to the same point in the file. Because terms are ordered in the file by ID, this happens whenever two edits add terms without any intervening IDs. Trivial clashes are easy to spot - they involve whole term stanzas + declarations. Occassionally non-trivial clashes will happen when two pull requests include edits to the same term or even the same axiom. Ask an editor for help if you don't feel confident resolving these.","title":"A guide to resolving merge conflicts"},{"location":"resolving_merge_conflicts/#sop","text":"Reserialise the Master file using the Ontology Development Kit (ODK). This requires setting up Docker and ODK. If not already set up, follow the instructions here . Open Docker. At the line command (PC) or Terminal (Mac), use the cd (change directory) command to navigate to the repository's src/ontology/ directory. For example, ''' cd PATH_TO_ONTOLOGY/src/ontology/ ''' Replace \"PATH_TO_ONTOLOGY\" with the actual file path to the ontology. If you need to orient yourself, use the '''pwd''' (present working directory) or '''ls''' (list) line commands. If you are resolving a conflict in an .owl file, run: ''' sh run.sh make normalize_src ''' If you are resolving a conflict in an .obo file, run: ''' sh run.sh make normalize_obo_src ''' In CL, edits sometimes result in creating a large amount of uninteded differences involving ^^xsd:string. If you see these differences after running the command above, they can be resolved by following the instructions here . In GitHub Desktop: Checkout Master and pull to make sure your Master branch is up to date. Checkout the branch for the pull request and make sure it is up to date. Choose Branch > Update from master: GitHub desktop should detect the clash and ask you if you want to open in your text editor of choice (e.g., Atom). If clashes are due to trivial ordering problems, delete the conflict marks (<<<<<<<, =======, >>>>>>>), commit and push back to GitHub. Check the resulting diffs on the Pull Request on GitHub. Once the checks have run and are successful, merge and delete the branch.","title":"SOP."},{"location":"odk-workflows/","text":"Default ODK Workflows \u00b6 Daily Editors Workflow Release Workflow Manage your ODK Repository Setting up Docker for ODK Imports management Managing the documentation","title":"Overview"},{"location":"odk-workflows/#default-odk-workflows","text":"Daily Editors Workflow Release Workflow Manage your ODK Repository Setting up Docker for ODK Imports management Managing the documentation","title":"Default ODK Workflows"},{"location":"odk-workflows/ContinuousIntegration/","text":"Introduction to Continuous Integration Workflows with ODK \u00b6 Historically, most repos have been using Travis CI for continuous integration testing and building, but due to runtime restrictions, we recently switched a lot of our repos to GitHub actions. You can set up your repo with CI by adding this to your configuration file (src/ontology/cl-odk.yaml): ci: - github_actions When updateing your repo , you will notice a new file being added: .github/workflows/qc.yml . This file contains your CI logic, so if you need to change, or add anything, this is the place!","title":"Continuous Integration"},{"location":"odk-workflows/ContinuousIntegration/#introduction-to-continuous-integration-workflows-with-odk","text":"Historically, most repos have been using Travis CI for continuous integration testing and building, but due to runtime restrictions, we recently switched a lot of our repos to GitHub actions. You can set up your repo with CI by adding this to your configuration file (src/ontology/cl-odk.yaml): ci: - github_actions When updateing your repo , you will notice a new file being added: .github/workflows/qc.yml . This file contains your CI logic, so if you need to change, or add anything, this is the place!","title":"Introduction to Continuous Integration Workflows with ODK"},{"location":"odk-workflows/EditorsWorkflow/","text":"Editors Workflow \u00b6 The editors workflow is one of the formal workflows to ensure that the ontology is developed correctly according to ontology engineering principles. There are a few different editors workflows: Local editing workflow: Editing the ontology in your local environment by hand, using tools such as Prot\u00e9g\u00e9, ROBOT templates or DOSDP patterns. Completely automated data pipeline (GitHub Actions) DROID workflow This document only covers the first editing workflow, but more will be added in the future Local editing workflow \u00b6 Workflow requirements: - git - github - docker - editing tool of choice, e.g. Prot\u00e9g\u00e9, your favourite text editor, etc 1. Create issue \u00b6 Ensure that there is a ticket on your issue tracker that describes the change you are about to make. While this seems optional, this is a very important part of the social contract of building an ontology - no change to the ontology should be performed without a good ticket, describing the motivation and nature of the intended change. 2. Update main branch \u00b6 In your local environment (e.g. your laptop), make sure you are on the main (prev. master ) branch and ensure that you have all the upstream changes, for example: git checkout master git pull 3. Create feature branch \u00b6 Create a new branch. Per convention, we try to use meaningful branch names such as: - issue23removeprocess (where issue 23 is the related issue on GitHub) - issue26addcontributor - release20210101 (for releases) On your command line, this looks like this: git checkout -b issue23removeprocess 4. Perform edit \u00b6 Using your editor of choice, perform the intended edit. For example: Protege Open src/ontology/cl-edit.owl in Protege Make the change Save the file TextEdit Open src/ontology/cl-edit.owl in TextEdit (or Sublime, Atom, Vim, Nano) Make the change Save the file Consider the following when making the edit. According to our development philosophy, the only places that should be manually edited are: src/ontology/cl-edit.owl Any ROBOT templates you chose to use (the TSV files only) Any DOSDP data tables you chose to use (the TSV files, and potentially the associated patterns) components (anything in src/ontology/components ), see here . Imports should not be edited (any edits will be flushed out with the next update). However, refreshing imports is a potentially breaking change - and is discussed elsewhere . Changes should usually be small. Adding or changing 1 term is great. Adding or changing 10 related terms is ok. Adding or changing 100 or more terms at once should be considered very carefully. 4. Check the Git diff \u00b6 This step is very important. Rather than simply trusting your change had the intended effect, we should always use a git diff as a first pass for sanity checking. In our experience, having a visual git client like GitHub Desktop or sourcetree is really helpful for this part. In case you prefer the command line: git status git diff 5. Quality control \u00b6 Now its time to run your quality control checks. This can either happen locally ( 5a ) or through your continuous integration system ( 7/5b ). 5a. Local testing \u00b6 If you chose to run your test locally: sh run.sh make IMP=false test This will run the whole set of configured ODK tests on including your change. If you have a complex DOSDP pattern pipeline you may want to add PAT=false to skip the potentially lengthy process of rebuilding the patterns. sh run.sh make IMP=false PAT=false test 6. Pull request \u00b6 When you are happy with the changes, you commit your changes to your feature branch, push them upstream (to GitHub) and create a pull request. For example: git add NAMEOFCHANGEDFILES git commit -m \"Added biological process term #12\" git push -u origin issue23removeprocess Then you go to your project on GitHub, and create a new pull request from the branch, for example: https://github.com/INCATools/ontology-development-kit/pulls There is a lot of great advise on how to write pull requests, but at the very least you should: - mention the tickets affected: see #23 to link to a related ticket, or fixes #23 if, by merging this pull request, the ticket is fixed. Tickets in the latter case will be closed automatically by Github when the pull request is merged. - summarise the changes in a few sentences. Consider the reviewer: what would they want to know right away. - If the diff is large, provide instructions on how to review the pull request best (sometimes, there are many changed files, but only one important change). 7/5b. Continuous Integration Testing \u00b6 If you didn't run and local quality control checks (see 5a ), you should have Continuous Integration (CI) set up, for example: - Travis - GitHub Actions More on how to set this up here . Once the pull request is created, the CI will automatically trigger. If all is fine, it will show up green, otherwise red. 8. Community review \u00b6 Once all the automatic tests have passed, it is important to put a second set of eyes on the pull request. Ontologies are inherently social - as in that they represent some kind of community consensus on how a domain is organised conceptually. This seems high brow talk, but it is very important that as an ontology editor, you have your work validated by the community you are trying to serve (e.g. your colleagues, other contributors etc). In our experience, it is hard to get more than one review on a pull request - two is great. You can set up GitHub branch protection to actually require a review before a pull request can be merged! We recommend this. This step seems daunting to some hopefully under-resourced ontologies, but we recommend to put this high up on your list of priorities - train a colleague, reach out! 9. Merge and cleanup \u00b6 When the QC is green and the reviews are in (approvals), it is time to merge the pull request. After the pull request is merged, remember to delete the branch as well (this option will show up as a big button right after you have merged the pull request). If you have not done so, close all the associated tickets fixed by the pull request. 10. Changelog (Optional) \u00b6 It is sometimes difficult to keep track of changes made to an ontology. Some ontology teams opt to document changes in a changelog (simply a text file in your repository) so that when release day comes, you know everything you have changed. This is advisable at least for major changes (such as a new release system, a new pattern or template etc).","title":"Editors Workflow"},{"location":"odk-workflows/EditorsWorkflow/#editors-workflow","text":"The editors workflow is one of the formal workflows to ensure that the ontology is developed correctly according to ontology engineering principles. There are a few different editors workflows: Local editing workflow: Editing the ontology in your local environment by hand, using tools such as Prot\u00e9g\u00e9, ROBOT templates or DOSDP patterns. Completely automated data pipeline (GitHub Actions) DROID workflow This document only covers the first editing workflow, but more will be added in the future","title":"Editors Workflow"},{"location":"odk-workflows/EditorsWorkflow/#local-editing-workflow","text":"Workflow requirements: - git - github - docker - editing tool of choice, e.g. Prot\u00e9g\u00e9, your favourite text editor, etc","title":"Local editing workflow"},{"location":"odk-workflows/EditorsWorkflow/#1-create-issue","text":"Ensure that there is a ticket on your issue tracker that describes the change you are about to make. While this seems optional, this is a very important part of the social contract of building an ontology - no change to the ontology should be performed without a good ticket, describing the motivation and nature of the intended change.","title":"1. Create issue"},{"location":"odk-workflows/EditorsWorkflow/#2-update-main-branch","text":"In your local environment (e.g. your laptop), make sure you are on the main (prev. master ) branch and ensure that you have all the upstream changes, for example: git checkout master git pull","title":"2. Update main branch"},{"location":"odk-workflows/EditorsWorkflow/#3-create-feature-branch","text":"Create a new branch. Per convention, we try to use meaningful branch names such as: - issue23removeprocess (where issue 23 is the related issue on GitHub) - issue26addcontributor - release20210101 (for releases) On your command line, this looks like this: git checkout -b issue23removeprocess","title":"3. Create feature branch"},{"location":"odk-workflows/EditorsWorkflow/#4-perform-edit","text":"Using your editor of choice, perform the intended edit. For example: Protege Open src/ontology/cl-edit.owl in Protege Make the change Save the file TextEdit Open src/ontology/cl-edit.owl in TextEdit (or Sublime, Atom, Vim, Nano) Make the change Save the file Consider the following when making the edit. According to our development philosophy, the only places that should be manually edited are: src/ontology/cl-edit.owl Any ROBOT templates you chose to use (the TSV files only) Any DOSDP data tables you chose to use (the TSV files, and potentially the associated patterns) components (anything in src/ontology/components ), see here . Imports should not be edited (any edits will be flushed out with the next update). However, refreshing imports is a potentially breaking change - and is discussed elsewhere . Changes should usually be small. Adding or changing 1 term is great. Adding or changing 10 related terms is ok. Adding or changing 100 or more terms at once should be considered very carefully.","title":"4. Perform edit"},{"location":"odk-workflows/EditorsWorkflow/#4-check-the-git-diff","text":"This step is very important. Rather than simply trusting your change had the intended effect, we should always use a git diff as a first pass for sanity checking. In our experience, having a visual git client like GitHub Desktop or sourcetree is really helpful for this part. In case you prefer the command line: git status git diff","title":"4. Check the Git diff"},{"location":"odk-workflows/EditorsWorkflow/#5-quality-control","text":"Now its time to run your quality control checks. This can either happen locally ( 5a ) or through your continuous integration system ( 7/5b ).","title":"5. Quality control"},{"location":"odk-workflows/EditorsWorkflow/#5a-local-testing","text":"If you chose to run your test locally: sh run.sh make IMP=false test This will run the whole set of configured ODK tests on including your change. If you have a complex DOSDP pattern pipeline you may want to add PAT=false to skip the potentially lengthy process of rebuilding the patterns. sh run.sh make IMP=false PAT=false test","title":"5a. Local testing"},{"location":"odk-workflows/EditorsWorkflow/#6-pull-request","text":"When you are happy with the changes, you commit your changes to your feature branch, push them upstream (to GitHub) and create a pull request. For example: git add NAMEOFCHANGEDFILES git commit -m \"Added biological process term #12\" git push -u origin issue23removeprocess Then you go to your project on GitHub, and create a new pull request from the branch, for example: https://github.com/INCATools/ontology-development-kit/pulls There is a lot of great advise on how to write pull requests, but at the very least you should: - mention the tickets affected: see #23 to link to a related ticket, or fixes #23 if, by merging this pull request, the ticket is fixed. Tickets in the latter case will be closed automatically by Github when the pull request is merged. - summarise the changes in a few sentences. Consider the reviewer: what would they want to know right away. - If the diff is large, provide instructions on how to review the pull request best (sometimes, there are many changed files, but only one important change).","title":"6. Pull request"},{"location":"odk-workflows/EditorsWorkflow/#75b-continuous-integration-testing","text":"If you didn't run and local quality control checks (see 5a ), you should have Continuous Integration (CI) set up, for example: - Travis - GitHub Actions More on how to set this up here . Once the pull request is created, the CI will automatically trigger. If all is fine, it will show up green, otherwise red.","title":"7/5b. Continuous Integration Testing"},{"location":"odk-workflows/EditorsWorkflow/#8-community-review","text":"Once all the automatic tests have passed, it is important to put a second set of eyes on the pull request. Ontologies are inherently social - as in that they represent some kind of community consensus on how a domain is organised conceptually. This seems high brow talk, but it is very important that as an ontology editor, you have your work validated by the community you are trying to serve (e.g. your colleagues, other contributors etc). In our experience, it is hard to get more than one review on a pull request - two is great. You can set up GitHub branch protection to actually require a review before a pull request can be merged! We recommend this. This step seems daunting to some hopefully under-resourced ontologies, but we recommend to put this high up on your list of priorities - train a colleague, reach out!","title":"8. Community review"},{"location":"odk-workflows/EditorsWorkflow/#9-merge-and-cleanup","text":"When the QC is green and the reviews are in (approvals), it is time to merge the pull request. After the pull request is merged, remember to delete the branch as well (this option will show up as a big button right after you have merged the pull request). If you have not done so, close all the associated tickets fixed by the pull request.","title":"9. Merge and cleanup"},{"location":"odk-workflows/EditorsWorkflow/#10-changelog-optional","text":"It is sometimes difficult to keep track of changes made to an ontology. Some ontology teams opt to document changes in a changelog (simply a text file in your repository) so that when release day comes, you know everything you have changed. This is advisable at least for major changes (such as a new release system, a new pattern or template etc).","title":"10. Changelog (Optional)"},{"location":"odk-workflows/ManageDocumentation/","text":"Updating the Documentation \u00b6 The documentation for CL is managed in two places (relative to the repository root): The docs directory contains all the files that pertain to the content of the documentation (more below) the mkdocs.yaml file cotains the documentation config, in particular its navigation bar and theme. The documentation is hosted using github pages, on a special branch of the repository (called gh-pages ). It is important that this branch is never deleted - it contains all the files GitHub pages needs to render and deploy the site. It is also important to note that the gh-pages branch should never be edited manually . All changes to the docs happen inside the docs directory on the main branch. Editing the docs \u00b6 Changing content \u00b6 All the documentation is contained in the docs directory, and is managed in Markdown . Markdown is a very simple and convenient way to produce text documents with formatting instructions, and is very easy to learn - it is also used, for example, in GitHub issues. This is a normal editing workflow: Open the .md file you want to change in an editor of choice (a simple text editor is often best). IMPORTANT : Do not edit any files in the docs/odk-workflows/ directory. These files are managed by the ODK system and will be overwritten when the repository is upgraded! If you wish to change these files, make an issue on the ODK issue tracker . Perform the edit and save the file Commit the file to a branch, and create a pull request as usual. If your development team likes your changes, merge the docs into master branch. Deploy the documentation (see below) Deploy the documentation \u00b6 The documentation is not automatically updated from the Markdown, and needs to be deployed deliberately. To do this, perform the following steps: In your terminal, navigate to the edit directory of your ontology, e.g.: cd cl/src/ontology Now you are ready to build the docs as follows: sh run.sh make update_docs Mkdocs now sets off to build the site from the markdown pages. You will be asked to Enter your username Enter your password (see here for using GitHub access tokens instead) IMPORTANT : Using password based authentication will be deprecated this year (2021). Make sure you read up on personal access tokens if that happens! If everything was successful, you will see a message similar to this one: INFO - Your documentation should shortly be available at: https://obophenotype.github.io/cell-ontology/ 3. Just to double check, you can now navigate to your documentation pages (usually https://obophenotype.github.io/cell-ontology/). Just make sure you give GitHub 2-5 minutes to build the pages!","title":"Managing the documentation"},{"location":"odk-workflows/ManageDocumentation/#updating-the-documentation","text":"The documentation for CL is managed in two places (relative to the repository root): The docs directory contains all the files that pertain to the content of the documentation (more below) the mkdocs.yaml file cotains the documentation config, in particular its navigation bar and theme. The documentation is hosted using github pages, on a special branch of the repository (called gh-pages ). It is important that this branch is never deleted - it contains all the files GitHub pages needs to render and deploy the site. It is also important to note that the gh-pages branch should never be edited manually . All changes to the docs happen inside the docs directory on the main branch.","title":"Updating the Documentation"},{"location":"odk-workflows/ManageDocumentation/#editing-the-docs","text":"","title":"Editing the docs"},{"location":"odk-workflows/ManageDocumentation/#changing-content","text":"All the documentation is contained in the docs directory, and is managed in Markdown . Markdown is a very simple and convenient way to produce text documents with formatting instructions, and is very easy to learn - it is also used, for example, in GitHub issues. This is a normal editing workflow: Open the .md file you want to change in an editor of choice (a simple text editor is often best). IMPORTANT : Do not edit any files in the docs/odk-workflows/ directory. These files are managed by the ODK system and will be overwritten when the repository is upgraded! If you wish to change these files, make an issue on the ODK issue tracker . Perform the edit and save the file Commit the file to a branch, and create a pull request as usual. If your development team likes your changes, merge the docs into master branch. Deploy the documentation (see below)","title":"Changing content"},{"location":"odk-workflows/ManageDocumentation/#deploy-the-documentation","text":"The documentation is not automatically updated from the Markdown, and needs to be deployed deliberately. To do this, perform the following steps: In your terminal, navigate to the edit directory of your ontology, e.g.: cd cl/src/ontology Now you are ready to build the docs as follows: sh run.sh make update_docs Mkdocs now sets off to build the site from the markdown pages. You will be asked to Enter your username Enter your password (see here for using GitHub access tokens instead) IMPORTANT : Using password based authentication will be deprecated this year (2021). Make sure you read up on personal access tokens if that happens! If everything was successful, you will see a message similar to this one: INFO - Your documentation should shortly be available at: https://obophenotype.github.io/cell-ontology/ 3. Just to double check, you can now navigate to your documentation pages (usually https://obophenotype.github.io/cell-ontology/). Just make sure you give GitHub 2-5 minutes to build the pages!","title":"Deploy the documentation"},{"location":"odk-workflows/ReleaseWorkflow/","text":"The release workflow \u00b6 The release workflow recommended by the ODK is based on GitHub releases and works as follows: Run a release with the ODK Review the release Merge to main branch Create a GitHub release These steps are outlined in detail in the following. Run a release with the ODK \u00b6 Preparation: Ensure that all your pull requests are merged into your main (master) branch Make sure that all changes to master are committed to Github ( git status should say that there are no modified files) Locally make sure you have the latest changes from master ( git pull ) Checkout a new branch (e.g. git checkout -b release-2021-01-01 ) You may or may not want to refresh your imports as part of your release strategy (see here ) Make sure you have the latest ODK installed by running docker pull obolibrary/odkfull To actually run the release, you: Open a command line terminal window and navigate to the src/ontology directory ( cd cl/src/ontology ) Run release pipeline: sh run.sh make prepare_release -B . Note that for some ontologies, this process can take up to 90 minutes - especially if there are large ontologies you depend on, like PRO or CHEBI. If everything went well, you should see the following output on your machine: Release files are now in ../.. - now you should commit, push and make a release on your git hosting site such as GitHub or GitLab . This will create all the specified release targets (OBO, OWL, JSON, and the variants, ont-full and ont-base) and copy them into your release directory (the top level of your repo). Review the release \u00b6 (Optional) Rough check. This step is frequently skipped, but for the more paranoid among us (like the author of this doc), this is a 3 minute additional effort for some peace of mind. Open the main release (cl.owl) in you favourite development environment (i.e. Protege) and eyeball the hierarchy. We recommend two simple checks: Does the very top level of the hierarchy look ok? This means that all new terms have been imported/updated correctly. Does at least one change that you know should be in this release appear? For example, a new class. This means that the release was actually based on the recent edit file. Commit your changes to the branch and make a pull request In your GitHub pull request, review the following three files in detail (based on our experience): cl.obo - this reflects a useful subset of the whole ontology (everything that can be covered by OBO format). OBO format has that speaking for it: it is very easy to review! cl-base.owl - this reflects the asserted axioms in your ontology that you have actually edited. Ideally also take a look at cl-full.owl , which may reveal interesting new inferences you did not know about. Note that the diff of this file is sometimes quite large. Like with every pull request, we recommend to always employ a second set of eyes when reviewing a PR! Merge the main branch \u00b6 Once your CI checks have passed, and your reviews are completed, you can now merge the branch into your main branch (don't forget to delete the branch afterwards - a big button will appear after the merge is finished). Create a GitHub release \u00b6 Go to your releases page on GitHub by navigating to your repository, and then clicking on releases (usually on the right, for example: https://github.com/obophenotype/cell-ontology/releases. Then click \"Draft new release\" As the tag version you need to choose the date on which your ontologies were build. You can find this, for example, by looking at the cl.obo file and check the data-version: property. The date needs to be prefixed with a v , so, for example v2020-02-06 . You can write whatever you want in the release title, but we typically write the date again. The description underneath should contain a concise list of changes or term additions. Click \"Publish release\". Done. Debugging typical ontology release problems \u00b6 Problems with memory \u00b6 When you are dealing with large ontologies, you need a lot of memory. When you see error messages relating to large ontologies such as CHEBI, PRO, NCBITAXON, or Uberon, you should think of memory first, see here . Problems when using OBO format based tools \u00b6 Sometimes you will get cryptic error messages when using legacy tools using OBO format, such as the ontology release tool (OORT), which is also available as part of the ODK docker container. In these cases, you need to track down what axiom or annotation actually caused the breakdown. In our experience (in about 60% of the cases) the problem lies with duplicate annotations ( def , comment ) which are illegal in OBO. Here is an example recipe of how to deal with such a problem: If you get a message like make: *** [cl.Makefile:84: oort] Error 255 you might have a OORT error. To debug this, in your terminal enter sh run.sh make IMP=false PAT=false oort -B (assuming you are already in the ontology folder in your directory) This should show you where the error is in the log (eg multiple different definitions) WARNING: THE FIX BELOW IS NOT IDEAL, YOU SHOULD ALWAYS TRY TO FIX UPSTREAM IF POSSIBLE Open cl-edit.owl in Protege and find the offending term and delete all offending issue (e.g. delete ALL definition, if the problem was \"multiple def tags not allowed\") and save. *While this is not idea, as it will remove all definitions from that term, it will be added back again when the term is fixed in the ontology it was imported from and added back in. Rerun sh run.sh make IMP=false PAT=false oort -B and if it all passes, commit your changes to a branch and make a pull request as usual.","title":"Release Workflow"},{"location":"odk-workflows/ReleaseWorkflow/#the-release-workflow","text":"The release workflow recommended by the ODK is based on GitHub releases and works as follows: Run a release with the ODK Review the release Merge to main branch Create a GitHub release These steps are outlined in detail in the following.","title":"The release workflow"},{"location":"odk-workflows/ReleaseWorkflow/#run-a-release-with-the-odk","text":"Preparation: Ensure that all your pull requests are merged into your main (master) branch Make sure that all changes to master are committed to Github ( git status should say that there are no modified files) Locally make sure you have the latest changes from master ( git pull ) Checkout a new branch (e.g. git checkout -b release-2021-01-01 ) You may or may not want to refresh your imports as part of your release strategy (see here ) Make sure you have the latest ODK installed by running docker pull obolibrary/odkfull To actually run the release, you: Open a command line terminal window and navigate to the src/ontology directory ( cd cl/src/ontology ) Run release pipeline: sh run.sh make prepare_release -B . Note that for some ontologies, this process can take up to 90 minutes - especially if there are large ontologies you depend on, like PRO or CHEBI. If everything went well, you should see the following output on your machine: Release files are now in ../.. - now you should commit, push and make a release on your git hosting site such as GitHub or GitLab . This will create all the specified release targets (OBO, OWL, JSON, and the variants, ont-full and ont-base) and copy them into your release directory (the top level of your repo).","title":"Run a release with the ODK"},{"location":"odk-workflows/ReleaseWorkflow/#review-the-release","text":"(Optional) Rough check. This step is frequently skipped, but for the more paranoid among us (like the author of this doc), this is a 3 minute additional effort for some peace of mind. Open the main release (cl.owl) in you favourite development environment (i.e. Protege) and eyeball the hierarchy. We recommend two simple checks: Does the very top level of the hierarchy look ok? This means that all new terms have been imported/updated correctly. Does at least one change that you know should be in this release appear? For example, a new class. This means that the release was actually based on the recent edit file. Commit your changes to the branch and make a pull request In your GitHub pull request, review the following three files in detail (based on our experience): cl.obo - this reflects a useful subset of the whole ontology (everything that can be covered by OBO format). OBO format has that speaking for it: it is very easy to review! cl-base.owl - this reflects the asserted axioms in your ontology that you have actually edited. Ideally also take a look at cl-full.owl , which may reveal interesting new inferences you did not know about. Note that the diff of this file is sometimes quite large. Like with every pull request, we recommend to always employ a second set of eyes when reviewing a PR!","title":"Review the release"},{"location":"odk-workflows/ReleaseWorkflow/#merge-the-main-branch","text":"Once your CI checks have passed, and your reviews are completed, you can now merge the branch into your main branch (don't forget to delete the branch afterwards - a big button will appear after the merge is finished).","title":"Merge the main branch"},{"location":"odk-workflows/ReleaseWorkflow/#create-a-github-release","text":"Go to your releases page on GitHub by navigating to your repository, and then clicking on releases (usually on the right, for example: https://github.com/obophenotype/cell-ontology/releases. Then click \"Draft new release\" As the tag version you need to choose the date on which your ontologies were build. You can find this, for example, by looking at the cl.obo file and check the data-version: property. The date needs to be prefixed with a v , so, for example v2020-02-06 . You can write whatever you want in the release title, but we typically write the date again. The description underneath should contain a concise list of changes or term additions. Click \"Publish release\". Done.","title":"Create a GitHub release"},{"location":"odk-workflows/ReleaseWorkflow/#debugging-typical-ontology-release-problems","text":"","title":"Debugging typical ontology release problems"},{"location":"odk-workflows/ReleaseWorkflow/#problems-with-memory","text":"When you are dealing with large ontologies, you need a lot of memory. When you see error messages relating to large ontologies such as CHEBI, PRO, NCBITAXON, or Uberon, you should think of memory first, see here .","title":"Problems with memory"},{"location":"odk-workflows/ReleaseWorkflow/#problems-when-using-obo-format-based-tools","text":"Sometimes you will get cryptic error messages when using legacy tools using OBO format, such as the ontology release tool (OORT), which is also available as part of the ODK docker container. In these cases, you need to track down what axiom or annotation actually caused the breakdown. In our experience (in about 60% of the cases) the problem lies with duplicate annotations ( def , comment ) which are illegal in OBO. Here is an example recipe of how to deal with such a problem: If you get a message like make: *** [cl.Makefile:84: oort] Error 255 you might have a OORT error. To debug this, in your terminal enter sh run.sh make IMP=false PAT=false oort -B (assuming you are already in the ontology folder in your directory) This should show you where the error is in the log (eg multiple different definitions) WARNING: THE FIX BELOW IS NOT IDEAL, YOU SHOULD ALWAYS TRY TO FIX UPSTREAM IF POSSIBLE Open cl-edit.owl in Protege and find the offending term and delete all offending issue (e.g. delete ALL definition, if the problem was \"multiple def tags not allowed\") and save. *While this is not idea, as it will remove all definitions from that term, it will be added back again when the term is fixed in the ontology it was imported from and added back in. Rerun sh run.sh make IMP=false PAT=false oort -B and if it all passes, commit your changes to a branch and make a pull request as usual.","title":"Problems when using OBO format based tools"},{"location":"odk-workflows/RepoManagement/","text":"Managing your ODK repository \u00b6 Updating your ODK repository \u00b6 Your ODK repositories configuration is managed in src/ontology/cl-odk.yaml . Once you have made your changes, you can run the following to apply your changes to the repository: sh run.sh make update_repo There are a large number of options that can be set to configure your ODK, but we will only discuss a few of them here. Managing imports \u00b6 You can use the update repository worflow described on this page to perform the following operations to your imports: Add a new import Modify an existing import Remove an import you no longer want Customise an import We will discuss all these workflows in the following. Add new import \u00b6 To add a new import, you first edit your odk config as described above , adding an id to the product list in the import_group section (for the sake of this example, we assume you already import RO, and your goal is to also import GO): import_group: products: - id: ro - id: go Note: our ODK file should only have one import_group which can contain multiple imports (in the products section). Next, you run the update repo workflow to apply these changes. Note that by default, this module is going to be a SLME Bottom module, see here . To change that or customise your module, see section \"Customise an import\". To finalise the addition of your import, perform the following steps: Add an imports statement to your src/ontology/cl-edit.owl file. We suggest to do this using a text editor, by simply copying an existing imports declaration and renaming it to the new ontology import, for example as follows: ... Ontology(<http://purl.obolibrary.org/obo/cl.owl> Import(<http://purl.obolibrary.org/obo/cl/imports/ro_import.owl>) Import(<http://purl.obolibrary.org/obo/cl/imports/go_import.owl>) ... Add your imports redirect to your catalog file src/ontology/catalog-v001.xml , for example: <uri name=\"http://purl.obolibrary.org/obo/cl/imports/go_import.owl\" uri=\"imports/go_import.owl\"/> Test whether everything is in order: Refresh your import Open in your Ontology Editor of choice (Protege) and ensure that the expected terms are imported. Modify an existing import \u00b6 If you simply wish to refresh your import in light of new terms, see here . If you wish to change the type of your module see section \"Customise an import\". Remove an existing import \u00b6 To remove an existing import, perform the following steps: remove the import declaration from your src/ontology/cl-edit.owl . remove the id from your src/ontology/cl-odk.yaml , eg. - id: go from the list of products in the import_group . run update repo workflow delete the associated files manually: src/imports/go_import.owl src/imports/go_terms.txt Remove the respective entry from the src/ontology/catalog-v001.xml file. Customise an import \u00b6 By default, an import module extracted from a source ontology will be a SLME module, see here . There are various options to change the default. The following change to your repo config ( src/ontology/cl-odk.yaml ) will switch the go import from an SLME module to a simple ROBOT filter module: import_group: products: - id: ro - id: go module_type: filter A ROBOT filter module is, essentially, importing all external terms declared by the your ontology (see here ] on how to declare external terms to be imported). Note that the filter module does not consider terms/annotations from namespaces other than the base-namespace of the ontology itself. For example, in the example of GO above, only annotations / axioms related to the GO base IRI (http://purl.obolibrary.org/obo/GO_) would be considered. This behaviour can be changed by adding additional base IRIs as follows: import_group: products: - id: go module_type: filter base_iris: - http://purl.obolibrary.org/obo/GO_ - http://purl.obolibrary.org/obo/CL_ - http://purl.obolibrary.org/obo/BFO If you wish to customise your import entirely, you can specify your own ROBOT command to do so. To do that, add the following to your repo config ( src/ontology/cl-odk.yaml ): import_group: products: - id: ro - id: go module_type: custom Now add a new goal in your custom Makefile ( src/ontology/cl.Makefile , not src/ontology/Makefile ). imports/go_import.owl: mirror/ro.owl imports/ro_terms_combined.txt if [ $(IMP) = true ]; then $(ROBOT) query -i $< --update ../sparql/preprocess-module.ru \\ extract -T imports/ro_terms_combined.txt --force true --individuals exclude --method BOT \\ query --update ../sparql/inject-subset-declaration.ru --update ../sparql/postprocess-module.ru \\ annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) --output $@.tmp.owl && mv $@.tmp.owl $@; fi Now feel free to change this goal to do whatever you wish it to do! It probably makes some sense (albeit not being a strict necessity), to leave most of the goal instead and replace only: extract -T imports/ro_terms_combined.txt --force true --individuals exclude --method BOT \\ to another ROBOT pipeline. Note : if your mirror is particularly large and complex, read this ODK recommendation .","title":"Manage your ODK Repository"},{"location":"odk-workflows/RepoManagement/#managing-your-odk-repository","text":"","title":"Managing your ODK repository"},{"location":"odk-workflows/RepoManagement/#updating-your-odk-repository","text":"Your ODK repositories configuration is managed in src/ontology/cl-odk.yaml . Once you have made your changes, you can run the following to apply your changes to the repository: sh run.sh make update_repo There are a large number of options that can be set to configure your ODK, but we will only discuss a few of them here.","title":"Updating your ODK repository"},{"location":"odk-workflows/RepoManagement/#managing-imports","text":"You can use the update repository worflow described on this page to perform the following operations to your imports: Add a new import Modify an existing import Remove an import you no longer want Customise an import We will discuss all these workflows in the following.","title":"Managing imports"},{"location":"odk-workflows/RepoManagement/#add-new-import","text":"To add a new import, you first edit your odk config as described above , adding an id to the product list in the import_group section (for the sake of this example, we assume you already import RO, and your goal is to also import GO): import_group: products: - id: ro - id: go Note: our ODK file should only have one import_group which can contain multiple imports (in the products section). Next, you run the update repo workflow to apply these changes. Note that by default, this module is going to be a SLME Bottom module, see here . To change that or customise your module, see section \"Customise an import\". To finalise the addition of your import, perform the following steps: Add an imports statement to your src/ontology/cl-edit.owl file. We suggest to do this using a text editor, by simply copying an existing imports declaration and renaming it to the new ontology import, for example as follows: ... Ontology(<http://purl.obolibrary.org/obo/cl.owl> Import(<http://purl.obolibrary.org/obo/cl/imports/ro_import.owl>) Import(<http://purl.obolibrary.org/obo/cl/imports/go_import.owl>) ... Add your imports redirect to your catalog file src/ontology/catalog-v001.xml , for example: <uri name=\"http://purl.obolibrary.org/obo/cl/imports/go_import.owl\" uri=\"imports/go_import.owl\"/> Test whether everything is in order: Refresh your import Open in your Ontology Editor of choice (Protege) and ensure that the expected terms are imported.","title":"Add new import"},{"location":"odk-workflows/RepoManagement/#modify-an-existing-import","text":"If you simply wish to refresh your import in light of new terms, see here . If you wish to change the type of your module see section \"Customise an import\".","title":"Modify an existing import"},{"location":"odk-workflows/RepoManagement/#remove-an-existing-import","text":"To remove an existing import, perform the following steps: remove the import declaration from your src/ontology/cl-edit.owl . remove the id from your src/ontology/cl-odk.yaml , eg. - id: go from the list of products in the import_group . run update repo workflow delete the associated files manually: src/imports/go_import.owl src/imports/go_terms.txt Remove the respective entry from the src/ontology/catalog-v001.xml file.","title":"Remove an existing import"},{"location":"odk-workflows/RepoManagement/#customise-an-import","text":"By default, an import module extracted from a source ontology will be a SLME module, see here . There are various options to change the default. The following change to your repo config ( src/ontology/cl-odk.yaml ) will switch the go import from an SLME module to a simple ROBOT filter module: import_group: products: - id: ro - id: go module_type: filter A ROBOT filter module is, essentially, importing all external terms declared by the your ontology (see here ] on how to declare external terms to be imported). Note that the filter module does not consider terms/annotations from namespaces other than the base-namespace of the ontology itself. For example, in the example of GO above, only annotations / axioms related to the GO base IRI (http://purl.obolibrary.org/obo/GO_) would be considered. This behaviour can be changed by adding additional base IRIs as follows: import_group: products: - id: go module_type: filter base_iris: - http://purl.obolibrary.org/obo/GO_ - http://purl.obolibrary.org/obo/CL_ - http://purl.obolibrary.org/obo/BFO If you wish to customise your import entirely, you can specify your own ROBOT command to do so. To do that, add the following to your repo config ( src/ontology/cl-odk.yaml ): import_group: products: - id: ro - id: go module_type: custom Now add a new goal in your custom Makefile ( src/ontology/cl.Makefile , not src/ontology/Makefile ). imports/go_import.owl: mirror/ro.owl imports/ro_terms_combined.txt if [ $(IMP) = true ]; then $(ROBOT) query -i $< --update ../sparql/preprocess-module.ru \\ extract -T imports/ro_terms_combined.txt --force true --individuals exclude --method BOT \\ query --update ../sparql/inject-subset-declaration.ru --update ../sparql/postprocess-module.ru \\ annotate --ontology-iri $(ONTBASE)/$@ $(ANNOTATE_ONTOLOGY_VERSION) --output $@.tmp.owl && mv $@.tmp.owl $@; fi Now feel free to change this goal to do whatever you wish it to do! It probably makes some sense (albeit not being a strict necessity), to leave most of the goal instead and replace only: extract -T imports/ro_terms_combined.txt --force true --individuals exclude --method BOT \\ to another ROBOT pipeline. Note : if your mirror is particularly large and complex, read this ODK recommendation .","title":"Customise an import"},{"location":"odk-workflows/RepositoryFileStructure/","text":"Repository structure \u00b6 The main kinds of files in the repository: Release files Imports Components Release files \u00b6 Release file are the file that are considered part of the official ontology release and to be used by the community. A detailed descripts of the release artefacts can be found here . Imports \u00b6 Imports are subsets of external ontologies that contain terms and axioms you would like to re-use in your ontology. These are considered \"external\", like dependencies in software development, and are not included in your \"base\" product, which is the release artefact which contains only those axioms that you personally maintain. These are the current imports in CL Import URL Type pr https://raw.githubusercontent.com/obophenotype/pro_obo_slim/master/pr_slim.owl None go http://purl.obolibrary.org/obo/go.owl None uberon http://purl.obolibrary.org/obo/uberon.owl None ro http://purl.obolibrary.org/obo/ro.owl None chebi http://purl.obolibrary.org/obo/chebi.owl None pato http://purl.obolibrary.org/obo/pato.owl None ncbitaxon http://purl.obolibrary.org/obo/ncbitaxon/subsets/taxslim.owl None Components \u00b6 Components, in contrast to imports, are considered full members of the ontology. This means that any axiom in a component is also included in the ontology base - which means it is considered native to the ontology. While this sounds complicated, consider this: conceptually, no component should be part of more than one ontology. If that seems to be the case, we are most likely talking about an import. Components are often not needed for ontologies, but there are some use cases: There is an automated process that generates and re-generates a part of the ontology A part of the ontology is managed in ROBOT templates The expressivity of the component is higher than the format of the edit file. For example, people still choose to manage their ontology in OBO format (they should not) missing out on a lot of owl features. They may chose to manage logic that is beyond OBO in a specific OWL component.","title":"Your ODK Repository Overview"},{"location":"odk-workflows/RepositoryFileStructure/#repository-structure","text":"The main kinds of files in the repository: Release files Imports Components","title":"Repository structure"},{"location":"odk-workflows/RepositoryFileStructure/#release-files","text":"Release file are the file that are considered part of the official ontology release and to be used by the community. A detailed descripts of the release artefacts can be found here .","title":"Release files"},{"location":"odk-workflows/RepositoryFileStructure/#imports","text":"Imports are subsets of external ontologies that contain terms and axioms you would like to re-use in your ontology. These are considered \"external\", like dependencies in software development, and are not included in your \"base\" product, which is the release artefact which contains only those axioms that you personally maintain. These are the current imports in CL Import URL Type pr https://raw.githubusercontent.com/obophenotype/pro_obo_slim/master/pr_slim.owl None go http://purl.obolibrary.org/obo/go.owl None uberon http://purl.obolibrary.org/obo/uberon.owl None ro http://purl.obolibrary.org/obo/ro.owl None chebi http://purl.obolibrary.org/obo/chebi.owl None pato http://purl.obolibrary.org/obo/pato.owl None ncbitaxon http://purl.obolibrary.org/obo/ncbitaxon/subsets/taxslim.owl None","title":"Imports"},{"location":"odk-workflows/RepositoryFileStructure/#components","text":"Components, in contrast to imports, are considered full members of the ontology. This means that any axiom in a component is also included in the ontology base - which means it is considered native to the ontology. While this sounds complicated, consider this: conceptually, no component should be part of more than one ontology. If that seems to be the case, we are most likely talking about an import. Components are often not needed for ontologies, but there are some use cases: There is an automated process that generates and re-generates a part of the ontology A part of the ontology is managed in ROBOT templates The expressivity of the component is higher than the format of the edit file. For example, people still choose to manage their ontology in OBO format (they should not) missing out on a lot of owl features. They may chose to manage logic that is beyond OBO in a specific OWL component.","title":"Components"},{"location":"odk-workflows/SettingUpDockerForODK/","text":"Setting up your Docker environment for ODK use \u00b6 One of the most frequent problems with running the ODK for the first time is failure because of lack of memory. This can look like a Java OutOfMemory exception, but more often than not it will appear as something like an Error 137 . There are two places you need to consider to set your memory: Your src/ontology/run.sh (or run.bat) file. You can set the memory in there by adding robot_java_args: '-Xmx8G' to your src/ontology/cl-odk.yaml file, see for example here . Set your docker memory. By default, it should be about 10-20% more than your robot_java_args variable. You can manage your memory settings by right-clicking on the docker whale in your system bar-->Preferences-->Resources-->Advanced, see picture below.","title":"Setting up Docker for ODK"},{"location":"odk-workflows/SettingUpDockerForODK/#setting-up-your-docker-environment-for-odk-use","text":"One of the most frequent problems with running the ODK for the first time is failure because of lack of memory. This can look like a Java OutOfMemory exception, but more often than not it will appear as something like an Error 137 . There are two places you need to consider to set your memory: Your src/ontology/run.sh (or run.bat) file. You can set the memory in there by adding robot_java_args: '-Xmx8G' to your src/ontology/cl-odk.yaml file, see for example here . Set your docker memory. By default, it should be about 10-20% more than your robot_java_args variable. You can manage your memory settings by right-clicking on the docker whale in your system bar-->Preferences-->Resources-->Advanced, see picture below.","title":"Setting up your Docker environment for ODK use"},{"location":"odk-workflows/UpdateImports/","text":"Update Imports Workflow \u00b6 This page discusses how to update the contents of your imports, like adding or removing terms. If you are looking to customise imports, like changing the module type, see here . Importing a new term \u00b6 Note: some ontologies now use a merged-import system to manage dynamic imports, for these please follow instructions in the section title \"Using the Base Module approach\". Importing a new term is split into two sub-phases: Declaring the terms to be imported Refreshing imports dynamically Declaring terms to be imported \u00b6 There are three ways to declare terms that are to be imported from an external ontology. Choose the appropriate one for your particular scenario (all three can be used in parallel if need be): Protege-based declaration Using term files Using the custom import template Protege-based declaration \u00b6 This workflow is to be avoided, but may be appropriate if the editor does not have access to the ODK docker container . This approach also applies to ontologies that use base module import approach. Open your ontology (edit file) in Protege (5.5+). Select 'owl:Thing' Add a new class as usual. Paste the full iri in the 'Name:' field, for example, http://purl.obolibrary.org/obo/CHEBI_50906. Click 'OK' Now you can use this term for example to construct logical definitions. The next time the imports are refreshed (see how to refresh here ), the metadata (labels, definitions, etc) for this term are imported from the respective external source ontology and becomes visible in your ontology. Using term files \u00b6 Every import has, by default a term file associated with it, which can be found in the imports directory. For example, if you have a GO import in src/ontology/go_import.owl , you will also have an associated term file src/ontology/go_terms.txt . You can add terms in there simply as a list: GO:0008150 GO:0008151 Now you can run the refresh imports workflow ) and the two terms will be imported. Using the custom import template \u00b6 This workflow is appropriate if: You prefer to manage all your imported terms in a single file (rather than multiple files like in the \"Using term files\" workflow above). You wish to augment your imported ontologies with additional information. This requires a cautionary discussion. To enable this workflow, you add the following to your ODK config file ( src/ontology/cl-odk.yaml ), and update the repository : use_custom_import_module: TRUE Now you can manage your imported terms directly in the custom external terms template, which is located at src/templates/external_import.owl . Note that this file is a ROBOT template , and can, in principle, be extended to include any axioms you like. Before extending the template, however, read the following carefully. The main purpose of the custom import template is to enable the management off all terms to be imported in a centralised place. To enable that, you do not have to do anything other than maintaining the template. So if you, say current import APOLLO_SV:00000480 , and you wish to import APOLLO_SV:00000532 , you simply add a row like this: ID Entity Type ID TYPE APOLLO_SV:00000480 owl:Class APOLLO_SV:00000532 owl:Class When the imports are refreshed see imports refresh workflow , the term(s) will simply be imported from the configured ontologies. Now, if you wish to extent the Makefile (which is beyond these instructions) and add, say, synonyms to the imported terms, you can do that, but you need to (a) preserve the ID and ENTITY columns and (b) ensure that the ROBOT template is valid otherwise, see here . WARNING . Note that doing this is a widespread antipattern (see related issue ). You should not change the axioms of terms that do not belong into your ontology unless necessary - such changes should always be pushed into the ontology where they belong. However, since people are doing it, whether the OBO Foundry likes it or not, at least using the custom imports module as described here localises the changes to a single simple template and ensures that none of the annotations added this way are merged into the base file . Refresh imports \u00b6 If you want to refresh the import yourself (this may be necessary to pass the travis tests), and you have the ODK installed, you can do the following (using go as an example): First, you navigate in your terminal to the ontology directory (underneath src in your hpo root directory). cd src/ontology Then, you regenerate the import that will now include any new terms you have added. Note: You must have docker installed . sh run.sh make PAT=false imports/go_import.owl -B Since ODK 1.2.27, it is also possible to simply run the following, which is the same as the above: sh run.sh make refresh-go Note that in case you changed the defaults, you need to add IMP=true and/or MIR=true to the command below: sh run.sh make IMP=true MIR=true PAT=false imports/go_import.owl -B If you wish to skip refreshing the mirror, i.e. skip downloading the latest version of the source ontology for your import (e.g. go.owl for your go import) you can set MIR=false instead, which will do the exact same thing as the above, but is easier to remember: sh run.sh make IMP=true MIR=false PAT=false imports/go_import.owl -B Using the Base Module approach \u00b6 Since ODK 1.2.31, we support an entirely new approach to generate modules: Using base files. The idea is to only import axioms from ontologies that actually belong to it . A base file is a subset of the ontology that only contains those axioms that nominally belong there. In other words, the base file does not contain any axioms that belong to another ontology. An example would be this: Imagine this being the full Uberon ontology: Axiom 1: BFO:123 SubClassOf BFO:124 Axiom 1: UBERON:123 SubClassOf BFO:123 Axiom 1: UBERON:124 SubClassOf UBERON 123 The base file is the set of all axioms that are about UBERON terms: Axiom 1: UBERON:123 SubClassOf BFO:123 Axiom 1: UBERON:124 SubClassOf UBERON 123 I.e. Axiom 1: BFO:123 SubClassOf BFO:124 Gets removed. The base file pipeline is a bit more complex then the normal pipelines, because of the logical interactions between the imported ontologies. This is solved by _first merging all mirrors into one huge file and then extracting one mega module from it. Example: Let's say we are importing terms from Uberon, GO and RO in our ontologies. When we use the base pipelines, we 1) First obtain the base (ususally by simply downloading it, but there is also an option now to create it with ROBOT) 2) We merge all base files into one big pile 3) Then we extract a single module imports/merged_import.owl The first implementation of this pipeline is PATO, see https://github.com/pato-ontology/pato/blob/master/src/ontology/pato-odk.yaml. To check if your ontology uses this method, check src/ontology/cl-odk.yaml to see if use_base_merging: TRUE is declared under import_group If your ontology uses Base Module approach, please use the following steps: First, add the term to be imported to the term file associated with it (see above \"Using term files\" section if this is not clear to you) Next, you navigate in your terminal to the ontology directory (underneath src in your hpo root directory). cd src/ontology Then refresh imports by running sh run.sh make imports/merged_import.owl Note: if your mirrors are updated, you can run sh run.sh make no-mirror-refresh-merged This requires quite a bit of memory on your local machine, so if you encounter an error, it might be a lack of memory on your computer. A solution would be to create a ticket in an issue tracker requesting for the term to be imported, and your one of the local devs should pick this up and run the import for you. Lastly, restart Protege, and the term should be imported in ready to be used.","title":"Imports management"},{"location":"odk-workflows/UpdateImports/#update-imports-workflow","text":"This page discusses how to update the contents of your imports, like adding or removing terms. If you are looking to customise imports, like changing the module type, see here .","title":"Update Imports Workflow"},{"location":"odk-workflows/UpdateImports/#importing-a-new-term","text":"Note: some ontologies now use a merged-import system to manage dynamic imports, for these please follow instructions in the section title \"Using the Base Module approach\". Importing a new term is split into two sub-phases: Declaring the terms to be imported Refreshing imports dynamically","title":"Importing a new term"},{"location":"odk-workflows/UpdateImports/#declaring-terms-to-be-imported","text":"There are three ways to declare terms that are to be imported from an external ontology. Choose the appropriate one for your particular scenario (all three can be used in parallel if need be): Protege-based declaration Using term files Using the custom import template","title":"Declaring terms to be imported"},{"location":"odk-workflows/UpdateImports/#protege-based-declaration","text":"This workflow is to be avoided, but may be appropriate if the editor does not have access to the ODK docker container . This approach also applies to ontologies that use base module import approach. Open your ontology (edit file) in Protege (5.5+). Select 'owl:Thing' Add a new class as usual. Paste the full iri in the 'Name:' field, for example, http://purl.obolibrary.org/obo/CHEBI_50906. Click 'OK' Now you can use this term for example to construct logical definitions. The next time the imports are refreshed (see how to refresh here ), the metadata (labels, definitions, etc) for this term are imported from the respective external source ontology and becomes visible in your ontology.","title":"Protege-based declaration"},{"location":"odk-workflows/UpdateImports/#using-term-files","text":"Every import has, by default a term file associated with it, which can be found in the imports directory. For example, if you have a GO import in src/ontology/go_import.owl , you will also have an associated term file src/ontology/go_terms.txt . You can add terms in there simply as a list: GO:0008150 GO:0008151 Now you can run the refresh imports workflow ) and the two terms will be imported.","title":"Using term files"},{"location":"odk-workflows/UpdateImports/#using-the-custom-import-template","text":"This workflow is appropriate if: You prefer to manage all your imported terms in a single file (rather than multiple files like in the \"Using term files\" workflow above). You wish to augment your imported ontologies with additional information. This requires a cautionary discussion. To enable this workflow, you add the following to your ODK config file ( src/ontology/cl-odk.yaml ), and update the repository : use_custom_import_module: TRUE Now you can manage your imported terms directly in the custom external terms template, which is located at src/templates/external_import.owl . Note that this file is a ROBOT template , and can, in principle, be extended to include any axioms you like. Before extending the template, however, read the following carefully. The main purpose of the custom import template is to enable the management off all terms to be imported in a centralised place. To enable that, you do not have to do anything other than maintaining the template. So if you, say current import APOLLO_SV:00000480 , and you wish to import APOLLO_SV:00000532 , you simply add a row like this: ID Entity Type ID TYPE APOLLO_SV:00000480 owl:Class APOLLO_SV:00000532 owl:Class When the imports are refreshed see imports refresh workflow , the term(s) will simply be imported from the configured ontologies. Now, if you wish to extent the Makefile (which is beyond these instructions) and add, say, synonyms to the imported terms, you can do that, but you need to (a) preserve the ID and ENTITY columns and (b) ensure that the ROBOT template is valid otherwise, see here . WARNING . Note that doing this is a widespread antipattern (see related issue ). You should not change the axioms of terms that do not belong into your ontology unless necessary - such changes should always be pushed into the ontology where they belong. However, since people are doing it, whether the OBO Foundry likes it or not, at least using the custom imports module as described here localises the changes to a single simple template and ensures that none of the annotations added this way are merged into the base file .","title":"Using the custom import template"},{"location":"odk-workflows/UpdateImports/#refresh-imports","text":"If you want to refresh the import yourself (this may be necessary to pass the travis tests), and you have the ODK installed, you can do the following (using go as an example): First, you navigate in your terminal to the ontology directory (underneath src in your hpo root directory). cd src/ontology Then, you regenerate the import that will now include any new terms you have added. Note: You must have docker installed . sh run.sh make PAT=false imports/go_import.owl -B Since ODK 1.2.27, it is also possible to simply run the following, which is the same as the above: sh run.sh make refresh-go Note that in case you changed the defaults, you need to add IMP=true and/or MIR=true to the command below: sh run.sh make IMP=true MIR=true PAT=false imports/go_import.owl -B If you wish to skip refreshing the mirror, i.e. skip downloading the latest version of the source ontology for your import (e.g. go.owl for your go import) you can set MIR=false instead, which will do the exact same thing as the above, but is easier to remember: sh run.sh make IMP=true MIR=false PAT=false imports/go_import.owl -B","title":"Refresh imports"},{"location":"odk-workflows/UpdateImports/#using-the-base-module-approach","text":"Since ODK 1.2.31, we support an entirely new approach to generate modules: Using base files. The idea is to only import axioms from ontologies that actually belong to it . A base file is a subset of the ontology that only contains those axioms that nominally belong there. In other words, the base file does not contain any axioms that belong to another ontology. An example would be this: Imagine this being the full Uberon ontology: Axiom 1: BFO:123 SubClassOf BFO:124 Axiom 1: UBERON:123 SubClassOf BFO:123 Axiom 1: UBERON:124 SubClassOf UBERON 123 The base file is the set of all axioms that are about UBERON terms: Axiom 1: UBERON:123 SubClassOf BFO:123 Axiom 1: UBERON:124 SubClassOf UBERON 123 I.e. Axiom 1: BFO:123 SubClassOf BFO:124 Gets removed. The base file pipeline is a bit more complex then the normal pipelines, because of the logical interactions between the imported ontologies. This is solved by _first merging all mirrors into one huge file and then extracting one mega module from it. Example: Let's say we are importing terms from Uberon, GO and RO in our ontologies. When we use the base pipelines, we 1) First obtain the base (ususally by simply downloading it, but there is also an option now to create it with ROBOT) 2) We merge all base files into one big pile 3) Then we extract a single module imports/merged_import.owl The first implementation of this pipeline is PATO, see https://github.com/pato-ontology/pato/blob/master/src/ontology/pato-odk.yaml. To check if your ontology uses this method, check src/ontology/cl-odk.yaml to see if use_base_merging: TRUE is declared under import_group If your ontology uses Base Module approach, please use the following steps: First, add the term to be imported to the term file associated with it (see above \"Using term files\" section if this is not clear to you) Next, you navigate in your terminal to the ontology directory (underneath src in your hpo root directory). cd src/ontology Then refresh imports by running sh run.sh make imports/merged_import.owl Note: if your mirrors are updated, you can run sh run.sh make no-mirror-refresh-merged This requires quite a bit of memory on your local machine, so if you encounter an error, it might be a lack of memory on your computer. A solution would be to create a ticket in an issue tracker requesting for the term to be imported, and your one of the local devs should pick this up and run the import for you. Lastly, restart Protege, and the term should be imported in ready to be used.","title":"Using the Base Module approach"},{"location":"patterns/cellBearerOfQuality/","text":"cellBearerOfQuality \u00b6 http://purl.obolibrary.org/obo/cl/cellBearerOfQuality Description \u00b6 A cell that has a specific quality, such as binucleate. Contributors \u00b6 https://orcid.org/0000-0001-5208-3432 https://orcid.org/0000-0002-6601-2165 Name \u00b6 { quality } { cell } Annotations \u00b6 exact_synonym : { quality }d { cell } Definition \u00b6 Any { cell } that is { quality } Equivalent to \u00b6 { cell } and ( bearer of some { quality }) Data preview \u00b6 defined_class defined_class_label cell cell_label quality quality_label CL:0001061 abnormal cell CL:0000000 cell PATO:0000460 abnormal CL:0000225 anucleate cell CL:0000003 native cell PATO:0001405 anucleate CL:0000227 binucleate cell CL:0000003 native cell PATO:0001406 binucleate CL:0000103 bipolar neuron CL:0000099 interneuron PATO:0070006 bipolar morphology CL:4023077 bitufted neuron CL:0000099 interneuron PATO:0070012 bitufted cell morphology See full table here","title":"Cell, bearer of quality"},{"location":"patterns/cellBearerOfQuality/#cellbearerofquality","text":"http://purl.obolibrary.org/obo/cl/cellBearerOfQuality","title":"cellBearerOfQuality"},{"location":"patterns/cellBearerOfQuality/#description","text":"A cell that has a specific quality, such as binucleate.","title":"Description"},{"location":"patterns/cellBearerOfQuality/#contributors","text":"https://orcid.org/0000-0001-5208-3432 https://orcid.org/0000-0002-6601-2165","title":"Contributors"},{"location":"patterns/cellBearerOfQuality/#name","text":"{ quality } { cell }","title":"Name"},{"location":"patterns/cellBearerOfQuality/#annotations","text":"exact_synonym : { quality }d { cell }","title":"Annotations"},{"location":"patterns/cellBearerOfQuality/#definition","text":"Any { cell } that is { quality }","title":"Definition"},{"location":"patterns/cellBearerOfQuality/#equivalent-to","text":"{ cell } and ( bearer of some { quality })","title":"Equivalent to"},{"location":"patterns/cellBearerOfQuality/#data-preview","text":"defined_class defined_class_label cell cell_label quality quality_label CL:0001061 abnormal cell CL:0000000 cell PATO:0000460 abnormal CL:0000225 anucleate cell CL:0000003 native cell PATO:0001405 anucleate CL:0000227 binucleate cell CL:0000003 native cell PATO:0001406 binucleate CL:0000103 bipolar neuron CL:0000099 interneuron PATO:0070006 bipolar morphology CL:4023077 bitufted neuron CL:0000099 interneuron PATO:0070012 bitufted cell morphology See full table here","title":"Data preview"},{"location":"patterns/cellCapableOfBiologicalProcess/","text":"cellCapableOfBiologicalProcess \u00b6 http://purl.obolibrary.org/obo/cl/cellCapableOfBiologicalProcess Description \u00b6 Any cell that is involved in/capable of a particular biological process, such as acid secretion. Name \u00b6 { biological_process } { cell } Definition \u00b6 A { cell } that is capable of { biological_process }. Equivalent to \u00b6 { cell } and ( capable of some { biological_process }) Data preview \u00b6 defined_class defined_class_label biological_process biological_process_label cell cell_label CL:0000236 B cell GO:0019724 B cell mediated immunity CL:0000945 lymphocyte of B lineage CL:0000492 CD4-positive helper T cell GO:0001816 cytokine production CL:0000624 CD4-positive, alpha-beta T cell CL:0000795 CD8-positive, alpha-beta regulatory T cell GO:0050777 negative regulation of immune response CL:0000625 CD8-positive, alpha-beta T cell CL:0011005 GABAergic interneuron GO:0061534 gamma-aminobutyric acid secretion, neurotransmission CL:0000099 interneuron CL:0000617 GABAergic neuron GO:0061534 gamma-aminobutyric acid secretion, neurotransmission CL:0000540 neuron See full table here","title":"Cell, capable of Biological Process"},{"location":"patterns/cellCapableOfBiologicalProcess/#cellcapableofbiologicalprocess","text":"http://purl.obolibrary.org/obo/cl/cellCapableOfBiologicalProcess","title":"cellCapableOfBiologicalProcess"},{"location":"patterns/cellCapableOfBiologicalProcess/#description","text":"Any cell that is involved in/capable of a particular biological process, such as acid secretion.","title":"Description"},{"location":"patterns/cellCapableOfBiologicalProcess/#name","text":"{ biological_process } { cell }","title":"Name"},{"location":"patterns/cellCapableOfBiologicalProcess/#definition","text":"A { cell } that is capable of { biological_process }.","title":"Definition"},{"location":"patterns/cellCapableOfBiologicalProcess/#equivalent-to","text":"{ cell } and ( capable of some { biological_process })","title":"Equivalent to"},{"location":"patterns/cellCapableOfBiologicalProcess/#data-preview","text":"defined_class defined_class_label biological_process biological_process_label cell cell_label CL:0000236 B cell GO:0019724 B cell mediated immunity CL:0000945 lymphocyte of B lineage CL:0000492 CD4-positive helper T cell GO:0001816 cytokine production CL:0000624 CD4-positive, alpha-beta T cell CL:0000795 CD8-positive, alpha-beta regulatory T cell GO:0050777 negative regulation of immune response CL:0000625 CD8-positive, alpha-beta T cell CL:0011005 GABAergic interneuron GO:0061534 gamma-aminobutyric acid secretion, neurotransmission CL:0000099 interneuron CL:0000617 GABAergic neuron GO:0061534 gamma-aminobutyric acid secretion, neurotransmission CL:0000540 neuron See full table here","title":"Data preview"},{"location":"patterns/cellHasPlasmaMembranePartX/","text":"cellHasPlasmaMembranePartX \u00b6 http://purl.obolibrary.org/obo/cl/cellHasPlasmaMembranePartX Description \u00b6 A cell type that is characterized by a plasma membrane part, such as a cilium or receptor. Note - that this is only good for cells defined by a single plasma membrane receptor. Contributors \u00b6 https://orcid.org/0000-0001-5208-3432 https://orcid.org/0000-0002-6601-2165 Name \u00b6 { cell } { plasma_membrane } Annotations \u00b6 exact_synonym : { cell }-positive { plasma_membrane } Definition \u00b6 A { cell } that has a { plasma_membrane }. Equivalent to \u00b6 { cell } and ( has plasma membrane part some { plasma_membrane })","title":"Cell, has plasme membrane"},{"location":"patterns/cellHasPlasmaMembranePartX/#cellhasplasmamembranepartx","text":"http://purl.obolibrary.org/obo/cl/cellHasPlasmaMembranePartX","title":"cellHasPlasmaMembranePartX"},{"location":"patterns/cellHasPlasmaMembranePartX/#description","text":"A cell type that is characterized by a plasma membrane part, such as a cilium or receptor. Note - that this is only good for cells defined by a single plasma membrane receptor.","title":"Description"},{"location":"patterns/cellHasPlasmaMembranePartX/#contributors","text":"https://orcid.org/0000-0001-5208-3432 https://orcid.org/0000-0002-6601-2165","title":"Contributors"},{"location":"patterns/cellHasPlasmaMembranePartX/#name","text":"{ cell } { plasma_membrane }","title":"Name"},{"location":"patterns/cellHasPlasmaMembranePartX/#annotations","text":"exact_synonym : { cell }-positive { plasma_membrane }","title":"Annotations"},{"location":"patterns/cellHasPlasmaMembranePartX/#definition","text":"A { cell } that has a { plasma_membrane }.","title":"Definition"},{"location":"patterns/cellHasPlasmaMembranePartX/#equivalent-to","text":"{ cell } and ( has plasma membrane part some { plasma_membrane })","title":"Equivalent to"},{"location":"patterns/cellPartOfAnatomicalEntity/","text":"cellPartOfAnatomicalEntity \u00b6 http://purl.obolibrary.org/obo/cl/cellPartOfAnatomicalEntity Description \u00b6 A cell that is part of an anatomical entity. Contributors \u00b6 https://orcid.org/0000-0001-5208-3432 https://orcid.org/0000-0002-6601-2165 Name \u00b6 { cell } { anatomical_entity } Definition \u00b6 Any { cell } that is part of a { anatomical_entity }. Equivalent to \u00b6 { cell } and ( part of some { anatomical_entity }) Data preview \u00b6 defined_class defined_class_label anatomical_entity anatomical_entity_label cell cell_label CL:0009032 B cell of appendix UBERON:0001154 vermiform appendix CL:0000236 B cell CL:0009045 B cell of medullary sinus of lymph node UBERON:0009744 lymph node medullary sinus CL:0000236 B cell CL:0010007 His-Purkinje system cell UBERON:0004146 His-Purkinje system CL:0000003 native cell CL:0002680 PP cell of intestine UBERON:0000160 intestine CL:0000696 PP cell CL:0009015 Peyer's patch follicular dendritic cell UBERON:0001211 Peyer's patch CL:0000442 follicular dendritic cell See full table here","title":"Cell, part of anatomical entity"},{"location":"patterns/cellPartOfAnatomicalEntity/#cellpartofanatomicalentity","text":"http://purl.obolibrary.org/obo/cl/cellPartOfAnatomicalEntity","title":"cellPartOfAnatomicalEntity"},{"location":"patterns/cellPartOfAnatomicalEntity/#description","text":"A cell that is part of an anatomical entity.","title":"Description"},{"location":"patterns/cellPartOfAnatomicalEntity/#contributors","text":"https://orcid.org/0000-0001-5208-3432 https://orcid.org/0000-0002-6601-2165","title":"Contributors"},{"location":"patterns/cellPartOfAnatomicalEntity/#name","text":"{ cell } { anatomical_entity }","title":"Name"},{"location":"patterns/cellPartOfAnatomicalEntity/#definition","text":"Any { cell } that is part of a { anatomical_entity }.","title":"Definition"},{"location":"patterns/cellPartOfAnatomicalEntity/#equivalent-to","text":"{ cell } and ( part of some { anatomical_entity })","title":"Equivalent to"},{"location":"patterns/cellPartOfAnatomicalEntity/#data-preview","text":"defined_class defined_class_label anatomical_entity anatomical_entity_label cell cell_label CL:0009032 B cell of appendix UBERON:0001154 vermiform appendix CL:0000236 B cell CL:0009045 B cell of medullary sinus of lymph node UBERON:0009744 lymph node medullary sinus CL:0000236 B cell CL:0010007 His-Purkinje system cell UBERON:0004146 His-Purkinje system CL:0000003 native cell CL:0002680 PP cell of intestine UBERON:0000160 intestine CL:0000696 PP cell CL:0009015 Peyer's patch follicular dendritic cell UBERON:0001211 Peyer's patch CL:0000442 follicular dendritic cell See full table here","title":"Data preview"},{"location":"patterns/overview/","text":"Pattern directory \u00b6 This is a listing of all the patterns hosted as part of this directory Patterns in \u00b6 Cell bearer of quality \u00b6 A cell that has a specific quality, such as binucleate. Attribute Info IRI http://purl.obolibrary.org/obo/cl/cellBearerOfQuality Name cellBearerOfQuality Classes CL:0000000, PATO:0000001, Variables cell (CL:0000000), quality (PATO:0000001), Contributors 0000-0001-5208-3432 , 0000-0002-6601-2165 , Examples mondo Data preview: \u00b6 defined:class defined:class:label cell cell:label quality quality:label CL:0001061 abnormal cell CL:0000000 cell PATO:0000460 abnormal CL:0000225 anucleate cell CL:0000003 native cell PATO:0001405 anucleate CL:0000227 binucleate cell CL:0000003 native cell PATO:0001406 binucleate CL:0000103 bipolar neuron CL:0000099 interneuron PATO:0070006 bipolar morphology CL:4023077 bitufted neuron CL:0000099 interneuron PATO:0070012 bitufted cell morphology See full table here Cell capable of biological process \u00b6 Any cell that is involved in/capable of a particular biological process, such as acid secretion. Attribute Info IRI http://purl.obolibrary.org/obo/cl/cellCapableOfBiologicalProcess Name cellCapableOfBiologicalProcess Classes CL:0000000, GO:0008150, Variables cell (CL:0000000), biological_process (GO:0008150), Contributors Examples mondo Data preview: \u00b6 defined:class defined:class:label biological:process biological:process:label cell cell:label CL:0000236 B cell GO:0019724 B cell mediated immunity CL:0000945 lymphocyte of B lineage CL:0000492 CD4-positive helper T cell GO:0001816 cytokine production CL:0000624 CD4-positive, alpha-beta T cell CL:0000795 CD8-positive, alpha-beta regulatory T cell GO:0050777 negative regulation of immune response CL:0000625 CD8-positive, alpha-beta T cell CL:0011005 GABAergic interneuron GO:0061534 gamma-aminobutyric acid secretion, neurotransmission CL:0000099 interneuron CL:0000617 GABAergic neuron GO:0061534 gamma-aminobutyric acid secretion, neurotransmission CL:0000540 neuron See full table here Cell has plasma membrane part x \u00b6 A cell type that is characterized by a plasma membrane part, such as a cilium or receptor. Note - that this is only good for cells defined by a single plasma membrane receptor. Attribute Info IRI http://purl.obolibrary.org/obo/cl/cellHasPlasmaMembranePartX Name cellHasPlasmaMembranePartX Classes CL:0000000, CL:0000003, GO:0005886, Variables cell (CL:0000003), plasma_membrane (GO:0005886), Contributors 0000-0001-5208-3432 , 0000-0002-6601-2165 , Examples Cell part of anatomical entity \u00b6 A cell that is part of an anatomical entity. Attribute Info IRI http://purl.obolibrary.org/obo/cl/cellPartOfAnatomicalEntity Name cellPartOfAnatomicalEntity Classes CL:0000000, UBERON:0001062, Variables cell (CL:0000000), anatomical_entity (UBERON:0001062), Contributors 0000-0001-5208-3432 , 0000-0002-6601-2165 , Examples mondo Data preview: \u00b6 defined:class defined:class:label anatomical:entity anatomical:entity:label cell cell:label CL:0009032 B cell of appendix UBERON:0001154 vermiform appendix CL:0000236 B cell CL:0009045 B cell of medullary sinus of lymph node UBERON:0009744 lymph node medullary sinus CL:0000236 B cell CL:0010007 His-Purkinje system cell UBERON:0004146 His-Purkinje system CL:0000003 native cell CL:0002680 PP cell of intestine UBERON:0000160 intestine CL:0000696 PP cell CL:0009015 Peyer's patch follicular dendritic cell UBERON:0001211 Peyer's patch CL:0000442 follicular dendritic cell See full table here Taxon specific \u00b6 A cell that is restricted to a specific taxon, such as CL:0001200 'lymphocyte of B lineage, CD19-positive' are only in mammals. Note - this is not to be used for any cell that is restricted to a taxon, this is for taxon-specific subclasses of existing cell types. This should hardly ever be used. Attribute Info IRI http://purl.obolibrary.org/obo/cl/taxonSpecific Name taxonSpecific Classes CL:0000000, NCBITaxon:1, Variables cell (CL:0000000), taxon (NCBITaxon:1), Contributors 0000-0001-5208-3432 , 0000-0002-6601-2165 , Examples","title":"Design Patterns Overview"},{"location":"patterns/overview/#pattern-directory","text":"This is a listing of all the patterns hosted as part of this directory","title":"Pattern directory"},{"location":"patterns/overview/#patterns-in","text":"","title":"Patterns in"},{"location":"patterns/overview/#cell-bearer-of-quality","text":"A cell that has a specific quality, such as binucleate. Attribute Info IRI http://purl.obolibrary.org/obo/cl/cellBearerOfQuality Name cellBearerOfQuality Classes CL:0000000, PATO:0000001, Variables cell (CL:0000000), quality (PATO:0000001), Contributors 0000-0001-5208-3432 , 0000-0002-6601-2165 , Examples mondo","title":"Cell bearer of quality"},{"location":"patterns/overview/#data-preview","text":"defined:class defined:class:label cell cell:label quality quality:label CL:0001061 abnormal cell CL:0000000 cell PATO:0000460 abnormal CL:0000225 anucleate cell CL:0000003 native cell PATO:0001405 anucleate CL:0000227 binucleate cell CL:0000003 native cell PATO:0001406 binucleate CL:0000103 bipolar neuron CL:0000099 interneuron PATO:0070006 bipolar morphology CL:4023077 bitufted neuron CL:0000099 interneuron PATO:0070012 bitufted cell morphology See full table here","title":"Data preview:"},{"location":"patterns/overview/#cell-capable-of-biological-process","text":"Any cell that is involved in/capable of a particular biological process, such as acid secretion. Attribute Info IRI http://purl.obolibrary.org/obo/cl/cellCapableOfBiologicalProcess Name cellCapableOfBiologicalProcess Classes CL:0000000, GO:0008150, Variables cell (CL:0000000), biological_process (GO:0008150), Contributors Examples mondo","title":"Cell capable of biological process"},{"location":"patterns/overview/#data-preview_1","text":"defined:class defined:class:label biological:process biological:process:label cell cell:label CL:0000236 B cell GO:0019724 B cell mediated immunity CL:0000945 lymphocyte of B lineage CL:0000492 CD4-positive helper T cell GO:0001816 cytokine production CL:0000624 CD4-positive, alpha-beta T cell CL:0000795 CD8-positive, alpha-beta regulatory T cell GO:0050777 negative regulation of immune response CL:0000625 CD8-positive, alpha-beta T cell CL:0011005 GABAergic interneuron GO:0061534 gamma-aminobutyric acid secretion, neurotransmission CL:0000099 interneuron CL:0000617 GABAergic neuron GO:0061534 gamma-aminobutyric acid secretion, neurotransmission CL:0000540 neuron See full table here","title":"Data preview:"},{"location":"patterns/overview/#cell-has-plasma-membrane-part-x","text":"A cell type that is characterized by a plasma membrane part, such as a cilium or receptor. Note - that this is only good for cells defined by a single plasma membrane receptor. Attribute Info IRI http://purl.obolibrary.org/obo/cl/cellHasPlasmaMembranePartX Name cellHasPlasmaMembranePartX Classes CL:0000000, CL:0000003, GO:0005886, Variables cell (CL:0000003), plasma_membrane (GO:0005886), Contributors 0000-0001-5208-3432 , 0000-0002-6601-2165 , Examples","title":"Cell has plasma membrane part x"},{"location":"patterns/overview/#cell-part-of-anatomical-entity","text":"A cell that is part of an anatomical entity. Attribute Info IRI http://purl.obolibrary.org/obo/cl/cellPartOfAnatomicalEntity Name cellPartOfAnatomicalEntity Classes CL:0000000, UBERON:0001062, Variables cell (CL:0000000), anatomical_entity (UBERON:0001062), Contributors 0000-0001-5208-3432 , 0000-0002-6601-2165 , Examples mondo","title":"Cell part of anatomical entity"},{"location":"patterns/overview/#data-preview_2","text":"defined:class defined:class:label anatomical:entity anatomical:entity:label cell cell:label CL:0009032 B cell of appendix UBERON:0001154 vermiform appendix CL:0000236 B cell CL:0009045 B cell of medullary sinus of lymph node UBERON:0009744 lymph node medullary sinus CL:0000236 B cell CL:0010007 His-Purkinje system cell UBERON:0004146 His-Purkinje system CL:0000003 native cell CL:0002680 PP cell of intestine UBERON:0000160 intestine CL:0000696 PP cell CL:0009015 Peyer's patch follicular dendritic cell UBERON:0001211 Peyer's patch CL:0000442 follicular dendritic cell See full table here","title":"Data preview:"},{"location":"patterns/overview/#taxon-specific","text":"A cell that is restricted to a specific taxon, such as CL:0001200 'lymphocyte of B lineage, CD19-positive' are only in mammals. Note - this is not to be used for any cell that is restricted to a taxon, this is for taxon-specific subclasses of existing cell types. This should hardly ever be used. Attribute Info IRI http://purl.obolibrary.org/obo/cl/taxonSpecific Name taxonSpecific Classes CL:0000000, NCBITaxon:1, Variables cell (CL:0000000), taxon (NCBITaxon:1), Contributors 0000-0001-5208-3432 , 0000-0002-6601-2165 , Examples","title":"Taxon specific"},{"location":"patterns/taxonSpecific/","text":"taxonSpecific \u00b6 http://purl.obolibrary.org/obo/cl/taxonSpecific Description \u00b6 A cell that is restricted to a specific taxon, such as CL:0001200 'lymphocyte of B lineage, CD19-positive' are only in mammals. Note - this is not to be used for any cell that is restricted to a taxon, this is for taxon-specific subclasses of existing cell types. This should hardly ever be used. Contributors \u00b6 https://orcid.org/0000-0001-5208-3432 https://orcid.org/0000-0002-6601-2165 Name \u00b6 { cell }, { taxon } Definition \u00b6 Any { cell } that is part of a { taxon }. Equivalent to \u00b6 { cell } and ( in taxon some { taxon })","title":"Cell, taxon specific"},{"location":"patterns/taxonSpecific/#taxonspecific","text":"http://purl.obolibrary.org/obo/cl/taxonSpecific","title":"taxonSpecific"},{"location":"patterns/taxonSpecific/#description","text":"A cell that is restricted to a specific taxon, such as CL:0001200 'lymphocyte of B lineage, CD19-positive' are only in mammals. Note - this is not to be used for any cell that is restricted to a taxon, this is for taxon-specific subclasses of existing cell types. This should hardly ever be used.","title":"Description"},{"location":"patterns/taxonSpecific/#contributors","text":"https://orcid.org/0000-0001-5208-3432 https://orcid.org/0000-0002-6601-2165","title":"Contributors"},{"location":"patterns/taxonSpecific/#name","text":"{ cell }, { taxon }","title":"Name"},{"location":"patterns/taxonSpecific/#definition","text":"Any { cell } that is part of a { taxon }.","title":"Definition"},{"location":"patterns/taxonSpecific/#equivalent-to","text":"{ cell } and ( in taxon some { taxon })","title":"Equivalent to"}]}